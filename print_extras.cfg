## Copyright (C) 2023 Chris Laprade (chris@rootiest.com)
## 
## This file is part of printcfg.
## 
## printcfg is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## printcfg is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with printcfg.  If not, see <http://www.gnu.org/licenses/>.

#####################################
##            Print Extras         ##
##      Version 4.1.0 2023-7-3     ##
#####################################

## This file contains optional config
## sections and optional macros that can
## be used to extend the functionality 
##         of your printer.


################################
####### OPTIONAL_CONFIGS #######
################################

## Support Arcs (G2/G3)
#[gcode_arcs]
#resolution: 0.10

## Support for forcing moves outside of homing
#[force_move]
#enable_force_move: True

## Enable support for looping prints
#[sdcard_loop]

## Enable support for skew correction
#[skew_correction]



################################
####### OPTIONAL_MACROS ########
################################

################################
####### MARLIN COMMANDS ########
################################

[gcode_macro M601]
description: Pause printer
gcode:
    PAUSE ; Pause print

[gcode_macro M420]
description: Load bed mesh 
gcode:
    {% set s = params.S|default(0)|int %} ; S0 = clear, S1 = load
    {% if s == 0 %} ; clear
        BED_MESH_CLEAR ; Clear bed mesh
    {% else %} ; load
        {% set l = params.L|default('default') %} ; load profile
        BED_MESH_PROFILE LOAD={l} ; Load bed mesh profile
    {% endif %}

[gcode_macro M900]
description: Set Pressure Advance
gcode:
    {% if 'K' in params %} ; K value is required
        {% if 'E' in params %} ; E value is optional
            SET_PRESSURE_ADVANCE EXTRUDER={params.E} ADVANCE={params.K} ; Set pressure advance
        {% else %} ; E value is not present
            SET_PRESSURE_ADVANCE ADVANCE={params.K} ; Set pressure advance
        {% endif %}
    {% endif %}

[gcode_macro G27]
description: Park the nozzle
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {printcfg.park_base} ; Park the nozzle

[gcode_macro G29]
description: Mesh the bed
gcode:
    {% set t = params.T|default(0)|float %} ; T value is optional
    {% if printer.idle_timeout.state == "Printing" %}
        {action_respond_info("This command cannot be used while printing")} ; Cannot run while printing
    {% else %}
        CG28 ; Home if needed
        {% if t > 30.0 %} ; Set bed temp if needed
            SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={t} ; Set bed temp
            TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={t} MAXIMUM={t+1} ; Wait for bed temp (within 1 degree)
        {% endif %}
        BED_MESH_CALIBRATE ; Mesh the bed
    {% endif %}

[gcode_macro M205]
description: Set square corner velocity
gcode:
    {% if 'X' in params %} ; X value is optional
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.X} ; Set square corner velocity
    {% elif 'Y' in params %} ; Y value is optional
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.Y} ; Set square corner velocity
    {% endif %}

[gcode_macro M204]
description: Set acceleration
rename_existing: M204.1
gcode:
    {% set f = params.F|default(0.5)|float %} ; F value is optional
    {% if 'S' in params %} ; S value is required
        {% set s = params.S|float %} ; S value is required
        SET_VELOCITY_LIMIT ACCEL={s} ACCEL_TO_DECEL={ s * f } ; Set acceleration
    {% else %} ; S value is not present
        {% if 'P' in params %} ; P value is optional
            {% set p = params.P|float %} ; P value is optional
            {% if 'T' in params %} ; T value is optional
                {% set t = params.T|float %} ; T value is optional
                {% if p < t %} ; Use the smaller value
                SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f } ; Set acceleration
                {% else %} ; Use the smaller value
                SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f } ; Set acceleration
                {% endif %}
            {% else %} ; T value is not present
                SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f } ; Set acceleration
            {% endif %}
        {% elif 'T' in params %} ; T value is optional
            {% set t = params.T|float %} ; T value is optional 
            SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f } ; Set acceleration
        {% endif %}
    {% endif %}

[gcode_macro m201]
description: Set acceleration
gcode:
    {% if 'X' in params or 'Y' in params %}
        {% set accel = (params.X|default(params.Y)|float,
                params.Y|default(params.X)|float)|min %}
        {% if accel < printer.toolhead.max_accel %}
            SET_VELOCITY_LIMIT ACCEL="{accel}" ACCEL_TO_DECEL="{accel * 0.5}"
        {% endif %}
    {% else %}
        SET_VELOCITY_LIMIT
    {% endif %}

################################
######## FAN OVERRIDES #########
################################
## Allow SET_FAN_SPEED to be used for part-cooling fan
## If the FAN parameter is not provided or set to 'fan', use part-cooling fan
[gcode_macro SET_FAN_SPEED]
rename_existing: BASE_SET_FAN_SPEED
gcode:
    {% if 'FAN' in params %} ; FAN is specified
        {% if params.FAN|upper == 'FAN' %} ; If FAN is part-cooling fan
            {% if 'SPEED' in params %} ; SPEED parameter specified
                {% set S = params.SPEED|float * 255 %} ; Convert 0-1.0 to 0-255
                M106 S{S} ; Set part-cooling fan speed
            {% else %} ; SPEED not provided, turn off fan
                M106 S0 ; Turn off part-cooling fan
            {% endif %}
        {% endif %}
    {% else %} ; FAN parameter not provided
        {% if 'SPEED' in params %} ; Assume part-cooling fan
            {% set S = params.SPEED|float * 255 %} ; Convert 0-1.0 to 0-255
            M106 S{S} ; Set part-cooling fan speed
        {% elif rawparams == '' %} ; No parameters provided
            M106 S0 ; Turn off part-cooling fan
        {% else %} ; Assume pin/template format
            BASE_SET_FAN_SPEED {rawparams} ; Use original command
        {% endif %}
    {% endif %}

################################
####### HEATER_OVERIDES ########
################################

## Replace M104 with SET_HEATER_TEMP command
[gcode_macro M104]
rename_existing: M99104
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set config = printer.configfile.settings %} ; get realtime configfile settings
    #Parameters
    {% set s = params.S|float %}
    #Active extruder
    {% set t = printer.toolhead.extruder %}
    SET_HEATER_TEMPERATURE HEATER={t} TARGET={s}

## Replaces M109 with TEMPERATURE_WAIT command
## This will result in less time spent stabilizing the temps
[gcode_macro M109]
rename_existing: M99109
gcode:
    {% set s = params.S|float %}
    M104 {rawparams}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

## Replaces M190 with TEMPERATURE_WAIT command
## This will result in less time spent stabilizing the temps
#[gcode_macro M190]
#rename_existing: M99190
#gcode:
#    {% set s = params.S|float %}
#    M140 {rawparams}    ; Set bed temp
#    {% if s != 0 %}
#        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
#    {% endif %}

################################
######### PID_EXTRUDER #########
################################
## PID tune extruder
[gcode_macro PID_EXTRUDER]
description: PID Tune for the Extruder
gcode:
    {% set e = printer.toolhead.extruder %} ; get current extruder
    {% set T = params.TEMPERATURE|default(210)|float %} ; get target temperature
    {% if 'FAN_IN_PERCENT' in params %}
        {% set S = params.FAN_IN_PERCENT|float * 2.55 %} ; get 0-100% fan speed
    {% elif 'FAN' in params %}
        {% set S = params.FAN|float * 255 %} ; get 0-1.0 fan speed
    {% else %}
        {% set S = printer.fan.speed * 255 %} ; get current fan speed (0-1.0)
    {% endif %}
    {% set P = printer.configfile.config[e].pid_kp|float %} ; get PID parameters
    {% set I = printer.configfile.config[e].pid_ki|float %} ; get PID parameters
    {% set D = printer.configfile.config[e].pid_kd|float %} ; get PID parameters
    M106 S{S|int} ; Turn on fan
    M118 // PID parameters: pid_Kp={P} pid_Ki={I} pid_Kd={D}  (old) ; Display old PID parameters
    PID_CALIBRATE HEATER={e} TARGET={T} ; PID Tune the extruder
    TURN_OFF_HEATERS ; Turn off heaters
    SAVE_CONFIG ; Save the new PID parameters

## PID tune extruder (Marlin syntax)
[gcode_macro M301]
description: Hotend PID Tune
gcode:
    {% set e = params.E|default(0)|int %} ; get extruder
    {% set t = params.T|default(210)|float %} ; get target temperature
    {% if 'FAN_IN_PERCENT' in params %}
        {% set S = params.FAN_IN_PERCENT|float * 2.55 %} ; get 0-100% fan speed
    {% elif 'FAN' in params %}
        {% set S = params.FAN|float * 255 %} ; get 0-1.0 fan speed
    {% else %}
        {$ set S = printer.fan.speed * 255 %} ; get current fan speed (0-1.0)
    {% endif %}
    {% set P = printer.configfile.config[e].pid_kp|float %} ; get PID parameters
    {% set I = printer.configfile.config[e].pid_ki|float %} ; get PID parameters
    {% set D = printer.configfile.config[e].pid_kd|float %} ; get PID parameters
    M106 S{S|int} ; Turn on fan
    M118 // PID parameters: pid_Kp={P} pid_Ki={I} pid_Kd={D}  (old) ; Display old PID parameters
    {% if e == 0 %}
        {% set e = printer.toolhead.extruder %} ; get current extruder
    {% else %}
        {% set e = 'extruder' + e|string %} ; get extruder
    {% endif %}
    PID_CALIBRATE HEATER={e} TARGET={t} ; PID Tune the extruder

################################
############ PID_BED ###########
################################
## PID tune bed
[gcode_macro PID_BED]
description: PID Tune for the Bed
gcode:
    {% set T = params.TEMPERATURE|default(60)|float %} ; get target temperature
    {% set P = printer.configfile.config['heater_bed'].pid_kp|float %} ; get PID parameters
    {% set I = printer.configfile.config['heater_bed'].pid_ki|float %} ; get PID parameters
    {% set D = printer.configfile.config['heater_bed'].pid_kd|float %} ; get PID parameters
    M118 // Previous PID parameters: pid_Kp={P} pid_Ki={I} pid_Kd={D}  ; Display old PID parameters
    PID_CALIBRATE HEATER=heater_bed TARGET={T} ; PID Tune the bed
    TURN_OFF_HEATERS ; Turn off heaters
    SAVE_CONFIG ; Save the new PID parameters

## PID tune bed (Marlin syntax)
[gcode_macro M304]
description: Bed PID Tune
gcode:
    {% set t = params.T|default(60)|float %} ; get target temperature
    {% set P = printer.configfile.config['heater_bed'].pid_kp|float %} ; get PID parameters
    {% set I = printer.configfile.config['heater_bed'].pid_ki|float %} ; get PID parameters
    {% set D = printer.configfile.config['heater_bed'].pid_kd|float %} ; get PID parameters
    M118 // Previous PID parameters: pid_Kp={P} pid_Ki={I} pid_Kd={D}  ; Display old PID parameters
    PID_CALIBRATE HEATER=heater_bed TARGET={t} ; PID Tune the bed

################################
####### STEPPER OVERRIDES ######
################################
[gcode_macro M84]
description: Disable steppers
variable_timer_params: ""
rename_existing: M84.1
gcode:
    {% set timer_params = rawparams %}
    SET_GCODE_VARIABLE MACRO=M84 VARIABLE=timer_params VALUE="'{timer_params}'" ; Set timer params
    { action_respond_info("rawparams: %s" % (timer_params)) }
    {% set step_delay = params.S|default(0)|int %}
    {% if step_delay > 0 %}
        UPDATE_DELAYED_GCODE ID=stepper_timer DURATION={step_delay}
        { action_respond_info("timer started: %d" % (step_delay)) }
    {% else %}
        {% if "X" in rawparams%} SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0 {% endif %}
        {% if "Y" in rawparams%} SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0 {% endif %}
        {% if "Z" in rawparams%} SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0 {% endif %}
        {% if "E" in rawparams%} SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0 {% endif %}
        {% if rawparams == "" %} M84.1 {% endif %}
    {% endif %}

[gcode_macro M18]
description: Disable steppers
rename_existing: M18.1
gcode:
    M84 {rawparams}

[delayed_gcode stepper_timer]
initial_duration: 0.0
gcode:
    {% set timer_params = printer['gcode_macro M84'].timer_params %}
    { action_respond_info("Stepper timer expired.") }
    { action_respond_info("params: %s" % (timer_params)) }
    {% if "X" in timer_params%} SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0 {% endif %}
    {% if "Y" in timer_params%} SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0 {% endif %}
    {% if "Z" in timer_params%} SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0 {% endif %}
    {% if "E" in timer_params%} SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0 {% endif %}
    UPDATE_DELAYED_GCODE ID=stepper_timer DURATION=0
