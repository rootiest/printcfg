## Copyright (C) 2023 Chris Laprade (chris@rootiest.com)
## 
## This file is part of printcfg.
## 
## printcfg is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## printcfg is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with printcfg.  If not, see <http://www.gnu.org/licenses/>.

#####################################
##            Print Macros         ##
##      Version 4.1.0 2023-7-3     ##
#####################################

[include logging.cfg]

################################
######### START_PRINT ##########
################################
[gcode_macro START_PRINT]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=starting_print VALUE=1 ; begin print_start process
    ## Preprint status
    {% if printcfg.led_status == True %} ; if using LED status
        {printcfg.status_preprint} ; LED feedback
    {% endif %}
    ## Clear paused state
    CLEAR_PAUSE
    ## Define positioning system
    G90 ; use absolute coordinates
    M83 ; extruder relative mode
    SET_DEFAULTS MODE=START; reset to default settings
    ## Preheat bed surface
    HEAT_SURFACE
    ## Preheat/soak chamber
    PREP_CHAMBER
    ## Prepapre fans
    PREP_FANS
    ## Prepare bed suface
    PREP_SURFACE
    {% if printcfg.heat_soak_complete == 0 %}
        ## Pause without parking
        {printcfg.pause_no_park}
    {% else %}
        ## Wait for chamber preheat to finalize
        FINALIZE_ENVIRO
    {% endif %}

################################
####### SET_START_PRINT ########
################################
[gcode_macro SET_START_PRINT]
description: Set up print start variables
gcode:
    ################## Get PrintCFG ##################
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    ################## Get Parameters ##################
    ## Start Temps
    {% set bed_temp = params.BED_TEMP | default(printcfg.bed_temp) | float %}
    {% set extruder_temp = params.EXTRUDER_TEMP | default(printcfg.extruder_temp) | float %}
    {% set extruder_pre_temp = params.EXTRUDER_PRE_TEMP | default(printcfg.extruder_pre_temp) | float %}
    {% set chamber_temp = params.CHAMBER_TEMP | default(printcfg.chamber_temp) | float %}
    
    ## Start Steps
    {% set heat_soak = params.HEAT_SOAK | default(printcfg.heat_soak) | int %}
    {% set auto_z = params.AUTO_Z | default(printcfg.auto_z_calibrate) | int %}
    {% set z_tilt = params.Z_TILT | default(printcfg.z_tilt) | int %}
    {% set qgl = params.QUAD_GANTRY_LEVEL | default(printcfg.qgl) | int %}
    ## Bed Meshing
    {% set mesh = params.BED_MESH | default(printcfg.bed_mesh) | int %}
    {% set adaptive_mesh = params.ADAPTIVE_MESH | default (printcfg.mesh_adaptive) | int %}
    {% set load_mesh = params.LOAD_MESH | default(printcfg.load_mesh) | int %}
    {% set mesh_profile = params.MESH_PROFILE | default(printcfg.mesh_profile) | string %}
    ## Cleaning and Purging
    {% set cleaning = params.NOZZLE_BRUSH | default(printcfg.cleaning) | int %}
    {% set purging = params.NOZZLE_PURGE | default(printcfg.purging) | int %}
    {% set adaptive_purge = params.ADAPTIVE_PURGE | default(printcfg.adaptive_purge) | int %}
    {% set nevermore = params.USE_NEVERMORE | default(printcfg.nevermore) | int %}
    ############## Make Strings Booleans ##############%}
    {% if params.HEAT_SOAK is defined and params.HEAT_SOAK | lower == 'true' %}
        {% set heat_soak = 1 %}
    {% elif params.HEAT_SOAK is defined and params.HEAT_SOAK | lower == 'false' %}
        {% set heat_soak = 0 %}
    {% endif %}
    {% if params.AUTO_Z is defined and params.AUTO_Z | lower == ' true' %}
        {% set auto_z = 1 %}
    {% elif params.AUTO_Z is defined params.AUTO_Z | lower == 'false' %}
        {% set auto_z = 0 %}
    {% endif %}
    {% if params.Z_TILT is defined and params.Z_TILT | lower == 'true' %}
        {% set auto_z = 1 %}
    {% elif params.Z_TILT is defined and params.Z_TILT | lower == 'false' %}
        {% set auto_z = 0 %}
    {% endif %}
    {% if params.QUAD_GANTRY_LEVEL is defined and params.QUAD_GANTRY_LEVEL | lower == 'true' %}
        {% set qgl = 1 %}
    {% elif params.QUAD_GANTRY_LEVEL is defined and params.QUAD_GANTRY_LEVEL | lower == 'false' %}
        {% set qgl = 0 %}
    {% endif %}
    {% if params.BED_MESH is defined and params.BED_MESH | lower == 'true' %}
        {% set mesh = 1 %}
    {% elif params.BED_MESH is defined and params.BED_MESH | lower == 'false' %}
        {% set mesh = 0 %}
    {% endif %}
    {% if params.ADAPTIVE_MESH is defined and params.ADAPTIVE_MESH | lower == 'true' %}
        {% set adaptive_mesh = 1 %}
    {% elif params.ADAPTIVE_MESH is defined and params.ADAPTIVE_MESH | lower == 'false' %}
        {% set adaptive_mesh = 0 %}
    {% endif %}
    {% if params.LOAD_MESH is defined and params.LOAD_MESH | lower == 'true' %}
        {% set load_mesh = 1 %}
    {% elif params.LOAD_MESH is defined and params.LOAD_MESH | lower == 'false' %}
        {% set load_mesh = 0 %}
    {% endif %}
    {% if params.NOZZLE_BRUSH is defined and params.NOZZLE_BRUSH | lower == 'true' %}
        {% set cleaning = 1 %}
    {% elif params.NOZZLE_BRUSH is defined and params.NOZZLE_BRUSH | lower == 'false' %}
        {% set cleaning = 0 %}
    {% endif %}
    {% if params.NOZZLE_PURGE is defined and params.NOZZLE_PURGE | lower == 'true' %}
        {% set purging = 1 %}
    {% elif params.NOZZLE_PURGE is defined and params.NOZZLE_PURGE | lower == 'false' %}
        {% set purging = 0 %}
    {% endif %}
    {% if params.ADAPTIVE_PURGE is defined and params.ADAPTIVE_PURGE | lower == 'true' %}
        {% set adaptive_purge = 1 %}
    {% elif params.ADAPTIVE_PURGE is defined and params.ADAPTIVE_PURGE | lower == 'false' %}
        {% set adaptive_purge = 0 %}
    {% endif %}
    {% if params.USE_NEVERMORE is defined and params.USE_NEVERMORE | lower == 'true' %}
        {% set nevermore = 1 %}
    {% elif params.USE_NEVERMORE is defined and params.USE_NEVERMORE | lower == 'false' %}
        {% set nevermore = 0 %}
    {% endif %}
    ################## Set Variables ##################
    ## Start Temps
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=bed_temp VALUE={ bed_temp } ; set bed temp
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=extruder_temp VALUE={ extruder_temp } ; set extruder temp
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=extruder_pre_temp VALUE={ extruder_pre_temp } ; set extruder pre-heat temp
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=chamber_temp VALUE={ chamber_temp } ; set chamber temp
    ## Start Steps
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=heat_soak VALUE={ heat_soak } ; set heat soak time
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=auto_z_calibrate VALUE={ auto_z } ; set auto z calibrate
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=z_tilt VALUE={ z_tilt } ; set z tilt
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=qgl VALUE={ qgl } ; set qgl
    ## Bed Meshing
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=bed_mesh VALUE={ mesh } ; set bed mesh
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=mesh_adaptive VALUE={ adaptive_mesh } ; set adaptive mesh
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=load_mesh VALUE={ load_mesh } ; set load mesh
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=mesh_profile VALUE={ mesh_profile } ; set mesh profile
    ## Cleaning and Purging
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=cleaning VALUE={ cleaning } ; set nozzle cleaning
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=purging VALUE={ purging } ; set nozzle purging
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=adaptive_purge VALUE={ adaptive_purge } ; set adaptive purging
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=nevermore VALUE={ nevermore } ; set nevermore


################################
######### HEAT_SURFACE #########
################################
[gcode_macro HEAT_SURFACE]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    ## Preheat bed
    {% if printcfg.bed_temp > 0 %} ; if bed temp is set
        {% if printcfg.led_status == True %} ; if using LED status
            {printcfg.status_heat} ; LED feedback
        {% endif %}
        {% if printcfg.extruder_pretemp > 0 %} ; if extruder preheat is set
            M{printcfg.output} {"Warming extruder to " + printcfg.extruder_pretemp|int|string + "°C"} ; status feedback
            SET_HEATER_TEMPERATURE HEATER=extruder TARGET={printcfg.extruder_pretemp} ; allow partial nozzle warmup
        {% endif %}
        M{printcfg.output} {"Preheating bed to " + printcfg.bed_temp|int|string + "°C"} ; status feedback
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={printcfg.bed_temp} ; set bed temp
        {% if printcfg.bed_fans == True %} ; if using bed fans
            {printcfg.bed_fan_slow} ; slow speed bed fans
        {% endif %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={printcfg.bed_temp-1} MAXIMUM={printcfg.bed_temp+5} ; wait for bed temp
        {% if printcfg.bed_fans == True %} ; if using bed fans
            {printcfg.bed_fan_fast} ; fast speed bed fans
        {% endif %}
    {% endif %}

################################
######### PREP_CHAMBER #########
################################
[gcode_macro PREP_CHAMBER]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% if printcfg.chamber == True %} ; if using a chamber
        {% if printcfg.chamber_temp != 0 %} ; if chamber temp is set
            M{printcfg.output} Preheating chamber ; status feedback
            {% if printcfg.led_status == True %} ; if using LED status
                {printcfg.status_heat} ; LED feedback
            {% endif %}
            {% if printcfg.chamber_type == 'temperature_fan' %} ; if using a temperature_fan chamber sensor
                SET_TEMPERATURE_FAN_TARGET temperature_fan={printcfg.chamber_name} target={printcfg.chamber_temp} ; set chamber temp
            {% elif printcfg.chamber_type == 'heater_generic' %} ; if using a heater_generic chamber sensor
                SET_HEATER_TEMPERATURE HEATER={printcfg.chamber_name} TARGET={printcfg.chamber_temp} ; set chamber temp
            {% endif %}
            {% if printcfg.heat_soak == True %} ; if heat soak is enabled
                SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=heat_soak_complete VALUE=0 ; set heat soak incomplete
                HEAT_SOAK ; start heat soak
            {% endif %}
        {% endif %}
    {% endif %}

################################
########### HEAT_SOAK ##########
################################
[gcode_macro HEAT_SOAK]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    ## Handle Parameters
    {% if params.SENSOR is defined %}
        {% set sensor = params.SENSOR | default(printcfg.chamber_name) | lower %}
        SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=chamber_name VALUE={ sensor } ; set chamber sensor
    {% endif %}
    {% if params.SENSOR_TYPE is defined %}
        {% set sensor_type = params.SENSOR_TYPE | default(printcfg.chamber_type) | lower %}
        SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=chamber_type VALUE={ sensor_type } ; set chamber sensor type
    {% endif %}
    {% if params.EXTRUDER is defined %} ; if extruder temp is set
        {% set pre_temp = params.EXTRUDER | default(printcfg.extruder_pretemp) | float %} ; get extruder preheat temp
        SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=extruder_pretemp VALUE={ pre_temp } ; set extruder preheat temp
    {% endif %}
    {% if params.TIME is defined %} ; if time is set
        SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=time_soak VALUE=1 ; set time soak to true
        {% set time = params.TIME | default(printcfg.chamber_time) | float %} ; get time soak value
        SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=chamber_time VALUE={ time } ; set time soak value
    {% else %} ; if time is not set
        SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=time_soak VALUE=0 ; set time soak to false
        SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=temp_soak VALUE=1 ; set temp soak to true
    {% endif %}
    {% set temp = params.TEMP | default(printcfg.chamber_temp) | float %} ; get chamber temp
    {% set bed = params.BED | default(printcfg.bed_temp) | float %} ; get bed temp
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=chamber_temp VALUE={ temp } ; set chamber temp
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=bed_temp VALUE={ bed } ; set bed temp
    ## Check print mode
    {% if printcfg.starting_print|int == 0 %} ; if not starting a print
        ## Not in a print
        HEAT_SURFACE ; heat bed
    {% endif %}
    # Execute heat soak
    _DO_SOAK {rawparams} ; do soak

[gcode_macro _DO_SOAK]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% if printcfg.led_status == True %} ; if using LED status
        {printcfg.status_heat} ; LED feedback
    {% endif %}
    {% if printcfg.time_soak == True %} ; if using a time soak
        M{printcfg.output} "Soaking {printcfg.chamber_time} minutes" ; status feedback
        ## Start timer
        UPDATE_DELAYED_GCODE ID=heat_soak_timer DURATION={printcfg.chamber_time*60} ; start soak timer
        SET_IDLE_TIMEOUT TIMEOUT={printcfg.soak_idle_time} ; set idle timeout to soak time
        SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=heat_soak_complete VALUE=0
    {% endif %}
    {% if printcfg.temp_soak == True %} ; if using a temperature soak
        {% if printcfg.bed_fans == True %} ; if using bed fans
            {printcfg.bed_fan_fast} ; fast speed bed fans
        {% endif %}
        M{printcfg.output} {"Soaking until " + printcfg.chamber_temp|int|string + "°C"} ; status feedback
        _set_chamber TEMP={printcfg.chamber_temp} WAIT=true ; set chamber temp
        M{printcfg.output} {"Soaking completed at " + printcfg.chamber_temp|int|string + "°C"} ; status feedback
        SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=heat_soak_complete VALUE=1 ; set heat soak completed
    {% endif %}
    {% if printcfg.heat_soak_complete == 1 %} ; if heat soak complete
        {printcfg.bed_fan_off} ; turn off bed fans
    {% endif %}

################################
######## Heat Soak Timer #######
################################
[delayed_gcode heat_soak_timer]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    M{printcfg.output} "Soaking completed after {printcfg.chamber_time} minutes" ; status feedback
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=heat_soak_complete VALUE=1 ; set heat soak completed
    {printcfg.bed_fan_off} ; turn off bed fans
    {% if printcfg.starting_print|int == 1 %}
        ## Soak complete, resume starting print
        RESUME_BASE
    {% endif %}

################################
###### CHAMBER CONTROL #########
################################
[gcode_macro _set_chamber]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set config = printer.configfile.settings %} ; get realtime configfile settings
    ## Parameters
    {% set TEMP = params.TEMP|default(0)|float %} ; chamber temperature
    {% set WAIT = params.WAIT|default('false')|lower %} ; wait for temperature
    {% set SPEED = params.SPEED|default(0)|float %} ; chamber fan speed
    {% set chamber = printcfg.chamber_type + ' ' + printcfg.chamber_name %} ; chamber sensor
    ## Determine chamber type
    {% if printcfg.chamber_type == 'generic_fan' %} ; if using a generic_fan chamnber sensor type
        ## Set chamber fan speed
        SET_FAN_SPEED FAN={printcfg.chamber_name} SPEED={SPEED} ; set chamber fan speed
    {% elif printcfg.chamber_type == 'temperature_fan' %}
        ## Set chamber temperature
        SET_TEMPERATURE_FAN_TARGET temperature_fan={printcfg.chamber_name} TARGET={TEMP} ; set chamber temperature
        {% if WAIT == 'true' %} ; if waiting for temperature
            ## Wait for chamber temperature
            TEMPERATURE_WAIT SENSOR='{chamber}' MINIMUM={TEMP} MAXIMUM={TEMP+25} ; wait for chamber temperature 
        {% endif %}
        ## Set chamber fan speed
        SET_FAN_SPEED FAN={printcfg.chamber_name} SPEED={SPEED} ; set chamber fan speed
    {% elif printcfg.chamber_type == 'heater' %} ; if using a heater chamber sensor type
        ## Set chamber temperature
        SET_HEATER_TEMPERATURE HEATER={printcfg.chamber_name} TARGET={TEMP} ; set chamber temperature
        {% if WAIT == 'true' %} ; if waiting for temperature
            ## Wait for chamber temperature
            TEMPERATURE_WAIT SENSOR='{chamber}' MINIMUM={TEMP} MAXIMUM={TEMP+25} ; wait for chamber temperature
        {% endif %}
    {% elif printcfg.chamber_type == 'temperature_sensor' %} ; if using a temperature_sensor chamber sensor type
        {% if WAIT == 'true' %} ; if waiting for temperature
            ## Wait for chamber temperature
            TEMPERATURE_WAIT SENSOR='{chamber}' MINIMUM={TEMP} MAXIMUM={TEMP+25} ; wait for chamber temperature 
        {% endif %}
    {% elif printcfg.chamber_type == 'z_thermal_adjust' %}
        {% set chamber = printcfg.chamber_type %} ; chamber sensor
        {% if WAIT == 'true' %} ; if waiting for temperature
            ## Wait for chamber temperature
            TEMPERATURE_WAIT SENSOR='{chamber}' MINIMUM={TEMP} MAXIMUM={TEMP+25} ; wait for chamber temperature 
        {% endif %}
    {% endif %}
    {% if printcfg.debugging == True %}
        {action_respond_info("Chamber: " + chamber + " | Temperature: " + TEMP|string + " | Wait: " + WAIT|string + " | Speed: " + SPEED|string)}
    {% endif %}

################################
######### SET_CHAMBER ##########
################################
[gcode_macro SET_CHAMBER]
description: Set up enclosure control variables
gcode:
    ################## Get PrintCFG ##################
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    ################## Get Parameters ##################
    ## Use Chamber
    {% set chamber = params.USE_CHAMBER | default(printcfg.chamber) | int %}
    ## Start Temps and Times
    {% set chamber_temp = params.CHAMBER_TEMP | default(printcfg.chamber_temp) | float %}
    {% set chamber_time = params.CHAMBER_TIME | default(printcfg.chamber_time) | int %}
    {% set bed_temp = params.BED_TEMP | default(printcfg.bed_temp) | float %}
    ## Chamber Sensor
    {% set chamber_type = params.CHAMBER_TYPE | default(printcfg.chamber_type) | string %}
    {% set chamber_name = params.CHAMBER_NAME | default(printcfg.chamber_name) | string %}
    ## Soaking
    {% set heat_soak = params.HEAT_SOAK | default(printcfg.heat_soak) | int %}
    {% set time_soak = params.TIME_SOAK | default(printcfg.time_soak) | int %}
    {% set temp_soak = params.TEMP_SOAK | default(printcfg.temp_soak) | int %}
    ############## Make Strings Booleans ##############%}
    {% if params.USE_CHAMBER is defined and params.USE_CHAMBER | lower == 'true' %}
        {% set chamber = 1 %}
    {% elif params.USE_CHAMBER is defined and params.USE_CHAMBER | lower == 'false' %}
        {% set chamber = 0 %}
    {% endif %}
    {% if params.TIME_SOAK is defined and params.TIME_SOAK | lower == ' true' %}
        {% set time_soak = 1 %}
    {% elif params.TIME_SOAK is defined params.TIME_SOAK | lower == 'false' %}
        {% set time_soak = 0 %}
    {% endif %}
    {% if params.HEAT_SOAK is defined and params.HEAT_SOAK | lower == 'true' %}
        {% set heat_soak = 1 %}
    {% elif params.HEAT_SOAK is defined and params.HEAT_SOAK | lower == 'false' %}
        {% set heat_soak = 0 %}
    {% endif %}
    {% if params.TEMP_SOAK is defined and params.TEMP_SOAK | lower == 'true' %}
        {% set temp_soak = 1 %}
    {% elif params.TEMP_SOAK is defined and params.TEMP_SOAK | lower == 'false' %}
        {% set temp_soak = 0 %}
    {% endif %}
    ################## Set Variables ##################
    ## Use Chamber
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=chamber VALUE={ chamber } ; set bed temp
    ## Start Temps and Times
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=chamber_temp VALUE={ chamber_temp } ; set chamber temp
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=chamber_time VALUE={ chamber_time } ; set chamber time
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=bed_temp VALUE={ bed_temp } ; set bed temp
    ## Chamber Sensor
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=chamber_type VALUE={ chamber_type } ; set chamber type
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=chamber_name VALUE={ chamber_name } ; set chamber name
    ## Soaking
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=heat_soak VALUE={ heat_soak } ; set qgl
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=time_soak VALUE={ time_soak } ; set bed mesh
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=temp_soak VALUE={ temp_soak } ; set adaptive mesh

################################
########## PREP_FANS ###########
################################
[gcode_macro PREP_FANS]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    ## Set controller fan
    {% if printcfg.controller_fan == True %} ; if using a controller fan
        {printcfg.controller_fan_start} ; start controller fan
    {% endif %}
    ## Set part-cooling fan (off)
    M107 ; turn off part cooling fan
    ## Set nevermore/filter fan
    {% if printcfg.nevermore == True and printcfg.nevermore_speed > 0 %} ; if using a nevermore/filter fan
        SET_FAN_SPEED FAN={printcfg.nevermore_name} SPEED={printcfg.nevermore_speed} ; set nevermore/filter fan speed
    {% endif %}

################################
######### PREP_SURFACE #########
################################
[gcode_macro PREP_SURFACE]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set config = printer.configfile.settings %} ; get realtime configfile settings
    ## Homing/undock probe
    {% if printcfg.docking_probe == True %} ; if using a docking probe
        ## Collect probe
        M{printcfg.output} Collecting probe ; status feedback
        {% if printcfg.led_status == True %} ; if using LED status
            {printcfg.status_homing} ; LED feedback
        {% endif %}
        {% if printer.toolhead.homed_axes != "xyz" %} ; if not homed
            M{printcfg.output} Homing XY ; status feedback
            G28 Y X ; home XY axis
        {% endif %}
        {printcfg.attach_macro} ; attach probe
        M{printcfg.output} Homing Z ; status feedback
        G28 Z ; home Z axis
    {% else %} ; if not using a docking probe
        G28 ; home XYZ axis
    {% endif %}
    {% if printcfg.clean_probe == True %} ; if cleaning before probing
        {printcfg.clean_macro} ; clean nozzle
    {% endif %}
    M400 ; 
    {% if printcfg.z_tilt == True %} ; if using z-tilt
        {% if config.z_tilt is defined %} ; if z-tilt is configured
            M{printcfg.output} Calibrating Z ; status feedback
            {% if printcfg.led_status == True %} ; if using LED status
                {printcfg.status_calibrating_z} ; LED feedback
            {% endif %}
            Z_TILT_ADJUST ; adjust z-tilt
        {% else %} ; if z-tilt not configured
            M{printcfg.error_output} Z_tilt not configured!
        {% endif %}
    {% elif printcfg.qgl == True %} ; if using QGL
        {% if config.quad_gantry_level is defined %} ; if QGL is configured
            M{printcfg.output} Calibrating Z ; status feedback
            {% if printcfg.led_status == True %} ; if using LED status
                {printcfg.status_calibrating_z} ; LED feedback
            {% endif %}
            QUAD_GANTRY_LEVEL  ; adjust QGL
            G28 Z ; home Z axis
        {% else %} ; if QGL not configured
            M{printcfg.error_output} QGL not configured!
        {% endif %}
    {% endif %}
    ## Bed mesh
    {% if printcfg.bed_mesh == True %} ; if using bed mesh
        {% if config.bed_mesh is defined %} ; if bed mesh is configured
            M{printcfg.output} Mesh print area ; status feedback
            {% if printcfg.load_mesh == True %} ; if loading mesh
                BED_MESH_PROFILE LOAD={printcfg.mesh_profile} ; load mesh profile
            {% else %} ; if not loading mesh
                {% if printcfg.mesh_adaptive == True %} ; if using adaptive mesh}
                    BED_MESH_CALIBRATE ; generate new mesh
                {% else %} ; if not using adaptive mesh
                    _BED_MESH_CALIBRATE ; generate new mesh
                {% endif %}
            {% endif %}
        {% else %} ; if bed mesh not configured
            M{printcfg.error_output} Bed_mesh not configured!
        {% endif %}
    {% endif %}
    ## Z Calibration Functions
    {% if printcfg.auto_z_calibrate == True %} ; if using auto z-calibration
        {% if config.z_calibration is defined %} ; if z-calibration is configured
            M400
            M{printcfg.output} Calibrating Z ; status feedback
            {% if printcfg.led_status == True %} ; if using LED status
                {printcfg.status_calibrating_z} ; LED feedback
            {% endif %}
            CALIBRATE_Z ; adjust z-calibration
            M400
        {% else %} ; if z-calibration not configured
            M{printcfg.error_output} Z_calibration not configured!
        {% endif %}
    {% endif %}
    ## Dock probe
    {% if printcfg.docking_probe == True %} ; if using a docking probe
        M{printcfg.output} Docking probe ; status feedback
        {printcfg.dock_macro} ; dock probe
    {% endif %}

################################
####### FINALIZE_ENVIRO ########
################################
[gcode_macro FINALIZE_ENVIRO]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    ## Preheat hotend
    PREP_EXTRUDER
    ## Catch up
    M400
    ## Status notifications
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=starting_print VALUE=0 ; complete print_start process
    M{printcfg.output} Print Started ; status feedback
    {% if printcfg.led_status == True %} ; if using LED status
        {printcfg.status_printing} ; LED feedback
    {% endif %}
    ## Final catch up
    M400

################################
######## PREP_EXTRUDER #########
################################
[gcode_macro PREP_EXTRUDER]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% if printcfg.auto_filament_sensor == True %} ; if using auto filament sensor
        ## Turn on Filament Sensor
        ENABLEFILAMENTSENSOR
    {% endif %}
    ## Begin heating extruder hotend
    M{printcfg.output} Preheating tool ; status feedback
    {% if printcfg.led_status == True %} ; if using LED status
        {printcfg.status_heat} ; LED feedback
    {% endif %}
    M104 S{printcfg.extruder_temp} ; set final nozzle temp
    ## Park for preheating
    {% if printcfg.cleaning == True %} ; if using nozzle cleaning
        G0 Z{25 + printcfg.clean_z} F240 ; move to pre-cleaning height
        G0 X{printcfg.clean_x} Y{printcfg.clean_y} F3000 ; move to park position
    {% else %} ; if not using nozzle cleaning
        G0 Z{printcfg.preheat_z} F240 ; move to pre-heating height
        G0 X{printcfg.preheat_x} Y{printcfg.preheat_y} F3000 ; move to park position
    {% endif %}
    ## Wait for heating to complete
    M109 S{printcfg.extruder_temp} ; wait for nozzle temp to stabilize
    ## Status Alert
    {% if printcfg.audio_status == True %} ; if using audio status alerts
        {printcfg.start_audio} ; audio feedback
    {% endif %}
    ## Nozzle Cleaning
    {% if printcfg.cleaning == True %} ; if using nozzle cleaning
        {% if printcfg.led_status == True %} ; if using LED status
            {printcfg.status_clean} ; LED feedback
        {% endif %}
        {printcfg.clean_macro} ; clean nozzle
    {% endif %}
    ## Nozzle Purging
    {% if printcfg.purging == True %} ; if using nozzle purging
        {% if printcfg.led_status == True %} ; if using LED status
            {printcfg.status_clean} ; LED feedback
        {% endif %}
        {printcfg.purge_macro} ; purge nozzle
    {% endif %}
    ## Final catch up
    M400
    ## Extruder configuration
    G21 ; set units to millimeters
    G90 ; use absolute coordinates
    M82 ; use absolute distances for extrusion
    G92 E0 ; reset extrusion distance

################################
########## END_PRINT ###########
################################
[gcode_macro END_PRINT]
description: Present the finished print
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% if printcfg.end_print == True %} ; if using end print macro
        ## Final catch up
        M400
        {% if printcfg.led_status == True %} ; if using LED status
            {printcfg.status_part_ready} ; LED feedback
        {% endif %}
        {% if printcfg.end_retract == True %} ; if using end retraction
            G1 E-{printcfg.end_retract_length} F{printcfg.end_retract_speed * 60} ; retract filament
        {% endif %}
        {% if printcfg.clean_end == True %} ; if using end_print nozzle cleaning
            {printcfg.clean_macro} ; clean nozzle
        {% endif %}
        {printcfg.park_base} ; park toolhead
        ## Acknowledge success!
        M{printcfg.output} Print Complete ; status feedback
        {% if printcfg.audio_status == True %} ; if using audio status alerts
            {printcfg.success_audio} ; audio feedback
        {% endif %}
        {% if printcfg.led_status == True %} ; if using LED status
            {printcfg.status_ready} ; LED feedback
        {% endif %}
        {% if printcfg.end_unload == True %} ; if using end_print filament unload
            {printcfg.m600} ; unload filament
        {% endif %}
        STOP_COMPONENTS ; stop components
    {% endif %}

################################
###### STOP_COMPONENTS #########
################################
[gcode_macro STOP_COMPONENTS]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% if printcfg.auto_filament_sensor == True %} ; if using auto filament sensor
        ## Disable filament sensor
        DISABLEFILAMENTSENSOR
    {% endif %}
    {% if printcfg.controller_fan == True %} ; if using controller fan
        {printcfg.controller_fan_stop} ; stop controller fan
    {% endif %}
    {% if printcfg.use_scrubber == True %} ; if using scrubber
        ## Scrub VOCs
        SCRUBBER ; turn on scrubber
    {% else %}
        {% if printcfg.exhaust_fan == True %} ; if using exhaust fan
            M{printcfg.output} Exhausting chamber; status feedback
            {printcfg.exhaust_fan_start} ; start exhaust fan
            UPDATE_DELAYED_GCODE ID=exhaust_fan_delay DURATION={printcfg.exhaust_fan_delay} ; start exhaust fan delay
        {% else %} ; if not using exhaust fan
            SET_DEFAULTS MODE=END; reset to default settings
            SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=end_print VALUE=0 ; reset end_print
            {% if printcfg.power_off == True %} ; if using power off at end of print
                {printcfg.off_macro} ; power off printer
            {% endif %}
        {% endif %}
    {% endif %}
    G90 ; use absolute coordinates
    TURN_OFF_HEATERS ; turn off heaters
    M84 ; disable motors

################################
##### EXHAUST FAN DELAY ########
################################
[delayed_gcode exhaust_fan_delay]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    M{printcfg.output} Exhaust complete ; status feedback
    {printcfg.exhaust_fan_stop} ; stop exhaust fan
    {% if printcfg.end_print == True %}
        SET_DEFAULTS MODE=END; reset to default settings
        SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=end_print VALUE=0 ; reset end_print
        {% if printcfg.power_off == True %} ; if using power off at end of print
            {printcfg.off_macro} ; power off printer
        {% endif %}
    {% endif %}

################################
######## ADAPTIVE MESH #########
################################
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set config = printer.configfile.settings %} ; get realtime configfile settings
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
    {% set bed_mesh_min = config.bed_mesh.mesh_min %}
    {% set bed_mesh_max = config.bed_mesh.mesh_max %}
    {% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (config.bed_mesh.probe_count[0]-2) %}
    {% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (config.bed_mesh.probe_count[1]-2) %}
    {% set x_min = bed_mesh_min[0] %}
    {% set y_min = bed_mesh_min[1] %}
    {% set x_max = bed_mesh_max[0] %}
    {% set y_max = bed_mesh_max[1] %}
    { action_respond_info("{} points, clamping to mesh [{!r} {!r}]".format(
        all_points | count,
        bed_mesh_min,
        bed_mesh_max,
    )) }
    {% if printcfg.mesh_fuzz_enable == True %}
        {% if all_points %}
            {% set fuzz_range = range(printcfg.mesh_fuzz_min * 100 | int, printcfg.mesh_fuzz_max * 100 | int) %}
            {% set x_min = ( bed_mesh_min[0], ((all_points | map(attribute=0) | min - (fuzz_range | random / 100.0)) | default(bed_mesh_min[0])) ) | max %}
            {% set y_min = ( bed_mesh_min[1], ((all_points | map(attribute=1) | min - (fuzz_range | random / 100.0)) | default(bed_mesh_min[1])) ) | max %}
            {% set x_max = ( bed_mesh_max[0], ((all_points | map(attribute=0) | max + (fuzz_range | random / 100.0)) | default(bed_mesh_max[0])) ) | min %}
            {% set y_max = ( bed_mesh_max[1], ((all_points | map(attribute=1) | max + (fuzz_range | random / 100.0)) | default(bed_mesh_max[1])) ) | min %}
        {% endif %}
    {% else %}
        {% set x_min = [ bed_mesh_min[0], (all_points | map(attribute=0) | min | default(bed_mesh_min[0])) ] | max %}
        {% set y_min = [ bed_mesh_min[1], (all_points | map(attribute=1) | min | default(bed_mesh_min[1])) ] | max %}
        {% set x_max = [ bed_mesh_max[0], (all_points | map(attribute=0) | max | default(bed_mesh_max[0])) ] | min %}
        {% set y_max = [ bed_mesh_max[1], (all_points | map(attribute=1) | max | default(bed_mesh_max[1])) ] | min %}
    {% endif %}
    { action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(
        (x_min, y_min), 
        (x_max, y_max),
    )) }
    {% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | int) + 2 %}
    {% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | int) + 2 %}
    {% if (([points_x, points_y]|max) > 6) %}
        {% set algorithm = "bicubic" %}
        {% set min_points = 4 %}
    {% else %}
        {% set algorithm = "lagrange" %}
        {% set min_points = 3 %}
    {% endif %}
    { action_respond_info( "Algorithm: {}".format(algorithm)) }
    {% set points_x = [points_x, min_points]|max  %}
    {% set points_y = [points_y, min_points]|max  %}
    { action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }
    {% if config.bed_mesh.relative_reference_index is defined %}
        {% set ref_index = (points_x * points_y / 2) | int %}
        { action_respond_info( "Reference index: {}".format(ref_index) ) }  
    {% else %}
        {% set ref_index = -1 %}
    {% endif %}
    {% if printcfg.docking_probe == True %}
        {printcfg.attach_macro}              ; Attach/deploy a probe if the probe is stored somewhere outside of the print area
    {% endif %}
    {% if printcfg.led_status == True %}
        {printcfg.status_mesh} ; LED feedback
    {% endif %}
    _BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}
    {% if printcfg.docking_probe == True %}
        {printcfg.dock_macro}              ; Detach/stow a probe if the probe is stored somewhere outside of the print area
    {% endif %}

################################
######## ADAPTIVE_PURGE ########
################################
## This code is used to purge filament when the extruder is not at temperature
## and it is not possible to use the normal purge code.
## The purge is done by moving the extruder to the purge position and
## extruding a set amount of filament.

[gcode_macro ADAPTIVE_PURGE]
description: A purge macro that adapts to be near your actual printed objects
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% if printcfg.purge_adaptive == True %}
        {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
        {% set x_origin = (all_points | map(attribute=0) | min | default(printcfg.purge_x + printcfg.purge_dist_x + printcfg.purge_size)) - printcfg.purge_dist_x - printcfg.purge_size %}
        {% set y_origin = (all_points | map(attribute=1) | min | default(printcfg.purge_y + printcfg.purge_dist_y + printcfg.purge_size)) - printcfg.purge_dist_y - printcfg.purge_size %}
        {% set x_origin = ([x_origin, 0] | max) %}
        {% set y_origin = ([y_origin, 0] | max) %}
    {% else %}
        {% set x_origin = printcfg.purge_x | float %}
        {% set y_origin = printcfg.purge_y | float %}
    {% endif %}
    {% set purge_move_speed = 2.31 * printcfg.purge_size * printcfg.purge_flow_rate / (printcfg.purge_amount * 2.405) %}
    {% set prepurge_speed = printcfg.purge_flow_rate / 2.405 %}
    {% if printcfg.purge_debug == True %}
        { action_respond_info( "x: " + x_origin|string + " y: " + y_origin|string + " purge_move_speed: " + purge_move_speed|string + " prepurge_speed: " + prepurge_speed|string ) }
    {% endif %}
    {% if printcfg.led_status == True %}
        {printcfg.status_clean} ; LED feedback
    {% endif %}
    G92 E0
    G0 F{printcfg.travel_speed*60}                                                                                              ; Set travel speed
    G90                                                                                                                         ; Absolute positioning
    G0 X{x_origin} Y{y_origin+printcfg.purge_size/2}                                                                            ; Move to purge position
    G0 Z{printcfg.purge_z_height}                                                                                               ; Move to purge Z height
    M83                                                                                                                         ; Relative extrusion mode
    G1 E{printcfg.purge_tip_distance} F{prepurge_speed*60}                                                                      ; Move tip of filament to nozzle
    G1 X{x_origin+printcfg.purge_size*0.289} Y{y_origin+printcfg.purge_size} E{printcfg.purge_amount/4} F{purge_move_speed*60}  ; Purge first line of logo
    G1 E-.5 F2100                                                                                                               ; Retract
    G0 Z{printcfg.purge_z_height*2}                                                                                             ; Z hop
    G0 X{x_origin+printcfg.purge_size*0.789} Y{y_origin+printcfg.purge_size}                                                    ; Move to second purge line origin
    G0 Z{printcfg.purge_z_height}                                                                                               ; Move to purge Z height
    G1 E.5 F2100                                                                                                                ; Recover
    G1 X{x_origin+printcfg.purge_size*0.211} Y{y_origin} E{printcfg.purge_amount/2} F{purge_move_speed*60}                      ; Purge second line of logo
    G1 E-.5 F2100                                                                                                               ; Retract
    G0 Z{printcfg.purge_z_height*2}                                                                                             ; Z hop
    G0 X{x_origin+printcfg.purge_size*0.711} Y{y_origin}                                                                        ; Move to third purge line origin
    G0 Z{printcfg.purge_z_height}                                                                                               ; Move to purge Z height
    G1 E.5 F2100                                                                                                                ; Recover
    G1 X{x_origin+printcfg.purge_size} Y{y_origin+printcfg.purge_size/2}  E{printcfg.purge_amount/4} F{purge_move_speed*60}     ; Purge third line of logo
    G1 E-.5 F2100                                                                                                               ; Retract
    G92 E0                                                                                                                      ; Reset extruder distance
    G0 Z{printcfg.purge_z_height*2}                                                                                             ; Z hop

################################
######### CLEAN_NOZZLE #########
################################
[gcode_macro CLEAN_NOZZLE]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    CG28 ; Home all axes if needed
    {% set nozzle_targ = params.TARGET|default(0)|float %}
    {% set is_hot = printcfg.clean_hot %}
    {% if params.HEAT is defined %}
        {% if params.HEAT|lower == 'true' %}
            {% set is_hot = False %}
        {% elif params.HEAT|lower == 'false' %}
            {% set is_hot = True %}
        {% endif %}
    {% endif %}
    {% if is_hot == False %}
        {% if printcfg.led_status == True %}
            {printcfg.status_heat}
        {% endif %}
        M{printcfg.output} Heating extruder
        {% if nozzle_targ > 0 %}
            M109 S{nozzle_targ}
        {% elif printcfg.clean_temp > 0 %}
            M109 S{printcfg.clean_temp}
        {% endif %}
    {% endif %}
    G90                                            ; absolute positioning
    ## Move nozzle to start position
    G0 X{printcfg.clean_x} Y{printcfg.clean_y} F6000
    G0 Z{printcfg.clean_z} F1500
    ## Set lighting
    {% if printcfg.led_status == True %}
        {printcfg.status_clean} ; LED feedback
    {% endif %}
    ## Wipe nozzle
    M{printcfg.output} Wiping nozzle
    {% for wipes in range(1, (printcfg.clean_wipe_qty + 1)) %}
    G0 X{printcfg.clean_x + printcfg.clean_wipe_dist} F{printcfg.clean_wipe_spd * 60}
    G0 X{printcfg.clean_x} F{printcfg.clean_wipe_spd * 60}
    {% endfor %}
    ## Raise nozzle
    G0 Z{printcfg.clean_raise_dist}
    {% if is_hot == False %}
        M{printcfg.output} Cooling extruder
        M104 S0
    {% endif %}
    {% if printcfg.post_clean_home == True %}
        G28 Z
    {% endif %}

################################
######### SET_CLEANING #########
################################
[gcode_macro SET_NOZZLE_CLEANING]
description: Set up nozzle cleaning parameters
gcode:
    ################## Get PrintCFG ##################
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    ################## Get Parameters ##################
    ## Cleaning Coordinates
    {% set clean_x = params.X | default(printcfg.clean_x) | float %}
    {% set clean_y = params.Y | default(printcfg.clean_y) | float %}
    {% set clean_z = params.Z | default(printcfg.clean_z) | float %}
    {% set cleaning = params.USE_CLEAN | default(printcfg.cleaning) | int %}
    ## Cleaning Temperature
    {% set clean_temp = params.TEMPERATURE | default(printcfg.clean_temp) | float %}
    ## Cleaning Scenarios
    {% set clean_probe = params.CLEAN_BEFORE_PROBING | default(printcfg.clean_probe) | int %}
    {% set clean_end = params.CLEAN_AFTER_PRINT | default(printcfg.clean_end) | int %}
    {% set post_clean_home = params.HOME_AFTER_CLEANING | default(printcfg.post_clean_home) | int %}
    {% set clean_m600 = params.CLEAN_AFTER_M600 | default(printcfg.clean_m600) | int %}
    ## Cleaning Wipe
    {% set clean_wipe_qty = params.WIPE_QUANTITY | default(printcfg.clean_wipe_qty) | int %}
    {% set clean_wipe_dist = params.WIPE_DISTANCE | default(printcfg.clean_wipe_dist) | float %}
    {% set clean_wipe_spd = params.WIPE_SPEED | default(printcfg.clean_wipe_spd) | float %}
    ## Cleaning Raise
    {% set clean_raise_dist = params.RAISE_DISTANCE | default(printcfg.clean_raise_dist) | float %}
    ################ Get Axis Limits ################
    {% set x_min = printer.toolhead.axis_minimum.x %}
    {% set x_max = printer.toolhead.axis_maximum.x %}
    {% set y_min = printer.toolhead.axis_minimum.y %}
    {% set y_max = printer.toolhead.axis_maximum.y %}
    {% set z_min = printer.toolhead.axis_minimum.z %}
    {% set z_max = printer.toolhead.axis_maximum.z %}
    ############### Check Coordinates ################
    {% set x = clean_x %}
    {% set y = clean_y %}
    {% set z = clean_z %}
    {% set mode = "Cleaning" %}
    {% if x < x_min or x > x_max %} ; if x is out of range
        {% set title = mode + " Coordinates" %}
        {% set msg = "X position is out of range: " + x|string %} ; set message
        {% set level = "error" %} ; set level
        { action_respond_info( "{}: {}".format( title, msg ) ) } ; report error
    {% else %}
        {% set title =  mode + " Coordinates" %}
        {% set msg = "X position is within range: " + x|string %} ; set message
        {% set level = "debug" %} ; set level
    {% endif %}
    logger title="{title}" msg="{msg}" level={level} ; log message
    {% if y < y_min or y > y_max %} ; if y is out of range
        {% set title =  mode + " Coordinates" %}
        {% set msg = "Y position is out of range: " + y|string %} ; set message
        {% set level = "error" %} ; set level
        { action_respond_info( "{}: {}".format( title, msg ) ) } ; report error
    {% else %}
        {% set title =  mode + " Coordinates" %}
        {% set msg = "Y position is within range: " + y|string %} ; set message
        {% set level = "debug" %} ; set level
    {% endif %}
    logger title="{title}" msg="{msg}" level={level} ; log message
    {% if z < z_min or z > z_max %} ; if z is out of range
        {% set title =  mode + " Coordinates" %}
        {% set msg = "Z position is out of range: " + z|string %} ; set message
        {% set level = "error" %} ; set level
        { action_respond_info( "{}: {}".format( title, msg ) ) } ; report error
    {% else %}
        {% set title =  mode + " Coordinates" %}
        {% set msg = "Z position is within range: " + z|string %} ; set message
        {% set level = "debug" %} ; set level
    {% endif %}
    logger title="{title}" msg="{msg}" level={level} ; log message
    ############## Make Strings Booleans ##############%}
    {% if params.USE_CLEAN is defined and params.USE_CLEAN | lower == 'true' %}
        {% set cleaning = 1 %}
    {% elif params.USE_CLEAN is defined and params.USE_CLEAN | lower == 'false' %}
        {% set cleaning = 0 %}
    {% endif %}
    {% if params.CLEAN_BEFORE_PROBING is defined and params.CLEAN_BEFORE_PROBING | lower == 'true' %}
        {% set clean_probe = 1 %}
    {% elif params.CLEAN_BEFORE_PROBING is defined and params.CLEAN_BEFORE_PROBING | lower == 'false' %}
        {% set clean_probe = 0 %}
    {% endif %}
    {% if params.CLEAN_AFTER_PRINT is defined and params.CLEAN_AFTER_PRINT | lower == 'true' %}
        {% set clean_end = 1 %}
    {% elif params.CLEAN_AFTER_PRINT is defined and params.CLEAN_AFTER_PRINT | lower == 'false' %}
        {% set clean_end = 0 %}
    {% endif %}
    {% if params.HOME_AFTER_CLEANING is defined and params.HOME_AFTER_CLEANING | lower == 'true' %}
        {% set post_clean_home = 1 %}
    {% elif params.HOME_AFTER_CLEANING is defined and params.HOME_AFTER_CLEANING | lower == 'false' %}
        {% set post_clean_home = 0 %}
    {% endif %}
    {% if params.CLEAN_AFTER_M600 is defined and params.CLEAN_AFTER_M600 | lower == 'true' %}
        {% set clean_m600 = 1 %}
    {% elif params.CLEAN_AFTER_M600 is defined and params.CLEAN_AFTER_M600 | lower == 'false' %}
        {% set clean_m600 = 0 %}
    {% endif %}

    ################## Set Variables ##################
    ## Use CLeaning
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=cleaning VALUE={ cleaning } ; set cleaning
    ## Cleaning Scenarios
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=clean_probe VALUE={ clean_probe } ; set clean probe
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=clean_end VALUE={ clean_end } ; set clean end
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=post_clean_home VALUE={ post_clean_home } ; set post clean home
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=clean_m600 VALUE={ clean_m600 } ; set clean m600
    ## Cleaning Coordinates
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=clean_x VALUE={ clean_x } ; set clean x
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=clean_y VALUE={ clean_y } ; set clean y
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=clean_z VALUE={ clean_z } ; set clean z
    ## Cleaning Wipe
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=clean_wipe_qty VALUE={ clean_wipe_qty } ; set clean wipe qty
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=clean_wipe_dist VALUE={ clean_wipe_dist } ; set clean wipe dist
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=clean_wipe_spd VALUE={ clean_wipe_spd } ; set clean wipe speed
    ## Cleaning Raise
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=clean_raise_dist VALUE={ clean_raise_dist } ; set clean raise dist
    ## Cleaning Temperture
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=clean_temp VALUE={ clean_temp } ; set clean temp

################################
######## SET_DEFAULTS ##########
################################
[gcode_macro SET_DEFAULTS]
description: Reset some defaults
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set mode = params.MODE|default('none')|lower %} ; get mode
    {% if mode == 'none' %} ; if no mode is specified, reset all
        SET_GCODE_OFFSET Z={printcfg.z_offset} ; reset Z offset
        M220 S{printcfg.default_speed_factor} ; reset speed factor
    {% elif mode == 'start' %} ; if start mode is specified, reset only start values
        {% if printcfg.start_z_offset == True %} ; if start Z offset is enabled, reset it
            SET_GCODE_OFFSET Z={printcfg.z_offset} ; reset Z offset
        {% endif %}
        {% if printcfg.start_speed_factor == True %} ; if start speed factor is enabled, reset it
            M220 S{printcfg.default_speed_factor} ; reset speed factor
        {% endif %}
    {% elif mode == 'end' %} ; if end mode is specified, reset only end values
        {% if printcfg.end_z_offset == True %} ; if end Z offset is enabled, reset it
            SET_GCODE_OFFSET Z={printcfg.z_offset} ; reset Z offset
        {% endif %}
        {% if printcfg.end_speed_factor == True %} ; if end speed factor is enabled, reset it
            M220 S{printcfg.default_speed_factor} ; reset speed factor
        {% endif %}
        SET_NOZZLE   ; set nozzle-specific settings
        SET_MATERIAL ; set material-specific settings
    {% endif %}


################################
########## SCRUBBER ############
################################
[gcode_macro SCRUBBER]
description: Run the Nevermore for a set time
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    M{printcfg.output} Scrubbing VOCs ; status feedback
    {% if printcfg.led_status == True %}
        {printcfg.status_clean} ; LED feedback
    {% endif %}
    ## Turn on Nevermore to scrub
    SET_FAN_SPEED FAN={printcfg.nevermore_name} SPEED={printcfg.scrub_speed}
    ## Set shut-off timer
    UPDATE_DELAYED_GCODE ID=scrub_timer DURATION={printcfg.scrub_time}
[delayed_gcode scrub_timer]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    ## Turn off Nevermore
    SET_FAN_SPEED FAN={printcfg.nevermore_name} SPEED=0
    M{printcfg.output} Scrubbing complete ; status feedback
    {% if printcfg.led_status == True %}
        {printcfg.status_ready} ; LED feedback
    {% endif %}
    {% if printcfg.end_print == True %}
        {% if printcfg.exhaust_fan == True %} ; if using exhaust fan
            M{printcfg.output} Exhausting chamber; status feedback
            {printcfg.exhaust_fan_start} ; start exhaust fan
            UPDATE_DELAYED_GCODE ID=exhaust_fan_delay DURATION={printcfg.exhaust_fan_delay} ; start exhaust fan delay
        {% else %} ; if not using exhaust fan
            SET_DEFAULTS MODE=END; reset to default settings
            SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=end_print VALUE=0 ; reset end_print
            {% if printcfg.power_off == True %} ; if using power off at end of print
                {printcfg.off_macro} ; power off printer
            {% endif %}
        {% endif %}
    {% endif %}

################################
###### FILTER TRACKING #########
################################
[gcode_macro RESET_AIR_FILTER]
description: Resets the air-filter replacement timer
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=filter_time VALUE=0
    SAVE_VARIABLE VARIABLE=air_filter_time VALUE=0
    { action_respond_info("Air filter timer has been reset.") }
[gcode_macro QUERY_AIR_FILTER]
description: Displays the amount of time the air filter has run since it was last reset.
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set hours = "%.2f"|format(printcfg.filter_time|int / 3600) %}
    { action_respond_info("Air Filter Hours: " + hours) }
[delayed_gcode _AIR_FILTER_TIMER]
initial_duration: 1
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set cached_time = printcfg.filter_time|int %}
        {% if cached_time == -1 %}
            {% set cached_time = printer.save_variables.variables.air_filter_time|default(0) %}
            SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=filter_time VALUE={ cached_time }
        {% endif %}
    {% if printer[printcfg.nevermore_type + " " + printcfg.nevermore_name].speed|float > 0 %}
        SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=filter_time VALUE={ cached_time + 1}
    {% endif %}
    {% set replacement_seconds = printcfg.hours_until_replacement|float * 3600 %}
    {% if cached_time > replacement_seconds %}
        { printcfg.filter_replacement }
    {% endif %}
    UPDATE_DELAYED_GCODE ID=_AIR_FILTER_TIMER DURATION=1
[delayed_gcode _AIR_FILTER_FLUSH_TIMER]
initial_duration: 300
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set saved_time = printer.save_variables.variables.air_filter_time|default(0)|float %}
    {% set actual_time = printcfg.filter_time|float %}
    {% if saved_time != actual_time %}
        SAVE_VARIABLE VARIABLE=air_filter_time VALUE={actual_time}
    {% endif %}
    UPDATE_DELAYED_GCODE ID=_AIR_FILTER_FLUSH_TIMER DURATION=300

################################
############ IDLER #############
################################
[gcode_macro _IDLER]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set POWER = printcfg.idle_power|lower %}
    {% set BED = printcfg.idle_bed|lower %}
    {% set EXTRUDER = printcfg.idle_extruder|lower %}
    {% set CHAMBER = printcfg.idle_chamber|lower %}
    {% set STEPPERS = printcfg.idle_steppers|lower %}
    {% if POWER == 'true' %}
        ## Disable steppers
        M84
        ## Disable all heaters
        TURN_OFF_HEATERS
        ## Run macro to turn off relay or smart switch
        {printcfg.off_macro} ; power off
    {% endif %}
    {% if STEPPERS == 'true' %}
        ## Disable steppers
        M84
    {% endif %}
    {% if BED == 'true' %}
        ## Disable bed heater
        SET_HEATER_TEMPERATURE HEATER=heater_bed
    {% endif %}
    {% if EXTRUDER == 'true' %}
        ## Disable extruder
        SET_HEATER_TEMPERATURE HEATER=extruder
    {% endif %}
    {% if CHAMBER == 'true' %}
        ## disable chamber components
        _set_chamber TARGET=0 SPEED=0
    {% endif %}

[gcode_macro _SET_IDLER]
description: Sets the idle timeout and behavior
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set VAR_POWER = printcfg.idle_power|lower %}
    {% set VAR_BED = printcfg.idle_bed|lower %}
    {% set VAR_EXTRUDER = printcfg.idle_extruder|lower %}
    {% set VAR_CHAMBER = printcfg.idle_chamber|lower %}
    {% set VAR_STEPPERS = printcfg.idle_steppers|lower %}
    {% set POWER = params.POWER|default(VAR_POWER)|lower %}
    {% set TIME = params.TIME|default(900)|lower %}
    {% set BED = params.BED|default(VAR_BED)|lower %}
    {% set EXTRUDER = params.EXTRUDER|default(VAR_EXTRUDER)|lower %}
    {% set CHAMBER = params.CHAMBER|default(VAR_CHAMBER)|lower %}
    {% set STEPPERS = params.STEPPERS|default(VAR_STEPPERS)|lower %}
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=idle_power VALUE={POWER}
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=idle_bed VALUE={BED}
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=idle_extruder VALUE={EXTRUDER}
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=idle_chamber VALUE={CHAMBER}
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=idle_steppers VALUE={STEPPERS}

###############################
####### CHANGE_FILAMENT ########
################################
[gcode_macro CHANGE_FILAMENT]
description: Change the filament in toolhead
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    CG28
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=m600_coldstart VALUE=1
    M{printcfg.output|int} Filament Change
    M600
    UNLOAD_FILAMENT
    {% if printcfg.auto_filament_sensor == True %}
        ENABLEFILAMENTSENSOR
    {% endif %}

################################_printcfg
####### FILAMENT_RUNOUT ########
################################
[gcode_macro FILAMENT_RUNOUT]
description: Procedure when Filament Runout Sensor is triggered
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% if printcfg.m600_coldstart == 0 %}
        M{printcfg.output|int} Filament Runout
        {% if printcfg.use_telegram == True %}
            {printcfg.telegram_runout}
        {% endif %}
        SET_IDLE_TIMEOUT TIMEOUT={printcfg.m600_idle_time}
        {% if printcfg.audio_status == True %} ; if using audio status alerts
            {printcfg.m600_audio}
            ALERT_BEEP_ON
        {% endif %}
        M600
        SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=m600_prev_temp VALUE={printer.extruder.target}
        SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=runout VALUE=1
        {% if printcfg.auto_unload == True %}
            M{printcfg.output|int} Unloading Filament
            UNLOAD_FILAMENT
        {% else %}
            {% if printcfg.use_fluidd == True %}
                {% if printcfg.m600_coldstart == 0 %}
                    M118 Run UNLOAD_FILAMENT to unload.
                    {% if printcfg.audio_status == True and printcfg.audio_frequency > 0 %}
                        M118 Run ALERT_BEEP_OFF to silence beeper
                    {% endif %}
                {% endif %}
            {% endif %}
            M109 S0
        {% endif %}
    {% endif %}

################################
######### COLOR_CHANGE #########
################################
[gcode_macro COLOR_CHANGE]
description: Procedure when Color Change is triggered
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    M{printcfg.output|int} Filament Runout
    {% if printcfg.use_telegram == True %}
        TELEGRAM_FILAMENT_RUNOUT
    {% endif %}
    SET_IDLE_TIMEOUT TIMEOUT={printcfg.m600_idle_time}
    {% if printcfg.audio_status == True %} ; if using audio status alerts
        {printcfg.m600_audio}
        ALERT_BEEP_ON
    {% endif %}
    M600
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=m600_prev_temp VALUE={printer.extruder.target}
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=runout VALUE=1
        M{printcfg.output|int} Unloading Filament
        UNLOAD_FILAMENT


################################
############ M600 ##############
################################
[gcode_macro M600]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    SET_IDLE_TIMEOUT TIMEOUT={printcfg.m600_idle_time} ; Increase idle timeout
    {% if printcfg.led_status == True %}
        {printcfg.status_m600}
    {% endif %}
    {% if printer.virtual_sdcard.is_active and not printer.pause_resume.is_paused %}
        {printcfg.pause_no_park} ; Pause printing
    {% endif %}
    _FILAMENT_PARK
    {% if printcfg.audio_status == True %} ; if using audio status alerts
        ALERT_BEEP_ON
    {% endif %}
    ## Check if this is slicer-initiated
    {% if printcfg.m600_coldstart == 0 and printcfg.runout == 0 %}
        CG28 ; Home all axes only if needed
        M{printcfg.output|int} Filament Change
        SET_IDLE_TIMEOUT TIMEOUT={printcfg.m600_idle_time}
        {% if printcfg.auto_unload == True %}
            M{printcfg.output|int} Unloading Filament
            UNLOAD_FILAMENT
        {% else %}
            M109 S0
            {% if printcfg.use_fluidd == True %}
                {% if printcfg.m600_coldstart == 0 %}
                    M118 Run UNLOAD_FILAMENT to unload.
                    {% if printcfg.audio_status == True and printcfg.audio_frequency > 0 %}
                        M118 Run ALERT_BEEP_OFF to silence beeper
                    {% endif %}
                {% endif %}
            {% endif %}
        {% endif %}
    {% endif %}
    ## Reset check variable
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=runout VALUE=0

################################
####### UNLOAD_FILAMENT ########
################################
[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set config = printer.configfile.settings %} ; get realtime configfile settings
    {% set LENGTH = params.LENGTH|default(printcfg.m600_unload_length)|float %} ; Unload length
    {% set TARGET = params.TARGET|default(printcfg.m600_default_temp)|float %} ; Unload temperature
    ##################
    {% if printcfg.audio_status == True %} ; if using audio status alerts
        ALERT_BEEP_OFF
    {% endif %}
    {% set cur_temp = printer.extruder.temperature|float %} ; Current temperature
    {% set cur_targ = printer.extruder.target|int %}        ; Current target
    {% if config.extruder.min_extrude_temp is defined %}
        {% set min_extrude = config.extruder.min_extrude_temp|int %}
    {% else %}
        {% set min_extrude = 180 %}
    {% endif %}
    {% if printcfg.m600_prev_temp != 0 %}
        {% set TARGET = printcfg.m600_prev_temp %}
    {% elif params.TARGET is defined and params.TARGET|int > min_extrude %} ; If current temp is below target
        {% set TARGET = params.TARGET|int|default(printcfg.m600_default_temp) %}
    {% endif %}
    CG28 ; Home all axes only if needed
    {% if cur_temp < (TARGET-5) %}
        {% if printcfg.led_status == True %}
            {printcfg.status_heat}
        {% endif %}
        M{printcfg.output|int} Heating nozzle
        M109 S{TARGET} ; Heat nozzle to target temperature
    {% endif %}
    {% if printcfg.led_status == True %}
        {printcfg.status_unload}
    {% endif %}
    M{printcfg.output|int} Unloading Filament
    _EXTRACT_FILAMENT  ; See print_config.cfg to modify
    {% if printcfg.auto_filament_sensor == True %}
        ENABLEFILAMENTSENSOR
    {% endif %}
    M{printcfg.output|int} Unload Complete
    {% if printcfg.led_status == True %}
        {printcfg.status_busy}
    {% endif %}
    {% if printcfg.use_fluidd == True %}
        {% if printcfg.auto_load == False %}
            M118 Run LOAD_FILAMENT to load.
        {% endif %}
    {% endif %}

################################
####### INSERT_FILAMENT ########
################################
[gcode_macro _INSERT_FILAMENT]
gcode:
    {% set printcfg = printer["gcode_macro _printcfg"] %}
    M{printcfg.output|int} Filament Detected!
    {% if printcfg.auto_load == True %}
        LOAD_FILAMENT
    {% endif %}


################################
######## LOAD_FILAMENT #########
################################
[gcode_macro LOAD_FILAMENT]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set config = printer.configfile.settings %} ; get realtime configfile settings
    {% set SLOW = params.SLOW|default(printcfg.m600_load_slow)|float %} ; Purge amount
    {% set FAST = params.FAST|default(printcfg.m600_load_fast)|float %} ; Load length
    ##################
    {% set cur_temp = printer.extruder.temperature|float %} ; Current temperature
    {% set cur_targ = printer.extruder.target|int %}        ; Current target
    {% if config.extruder.min_extrude_temp is defined %} ; If min extrude temp is defined
        {% set min_extrude = config.extruder.min_extrude_temp|int %} ; Set min extrude temp
    {% else %} ; If min extrude temp is not defined
        {% set min_extrude = 180 %} ; Set min extrude temp to 180
    {% endif %}
    {% if printcfg.m600_prev_temp != 0 %} ; If previous temp is not 0
        {% set TARGET = printcfg.m600_prev_temp %} ; Set target to previous temp
    {% elif params.TARGET is defined and params.TARGET|int > min_extrude %} ; If current temp is below minimum extruding temp
        {% set TARGET = params.TARGET|int|default(220) %} ; Set target to TARGET parameter
    {% else %} ; If current temp is above minimum extruding temp and TARGET parameter is not defined
        {% set TARGET = 220 %} ; Set target to 220
    {% endif %}
    {% if printer.extruder.target < min_extrude %} ; If extruder is not hot enough
        {% set TARGET = printcfg.m600_default_temp %} ; Heat up to default temp
    {% else %} ; If extruder is hot enough
        {% set TARGET = printer.extruder.target %} ; Set target to current extruder heater target
    {% endif %}
    CG28 ; Home all axes only if needed
    {% if cur_temp < (TARGET-5) %} ; If current temp is below target
        {% if printcfg.led_status == True %} ; if using led status alerts
            {printcfg.status_heat} ; set led to heating status
        {% endif %}
        M{printcfg.output|int} Heating nozzle
        M109 S{TARGET} ; Heat nozzle to target temperature
    {% endif %}
    {% if printcfg.led_status == True %} ; if using led status alerts
        {printcfg.status_load} ; set led to loading filament status
    {% endif %}
    M{printcfg.output|int}  Loading filament
    G91 ; Relative positioning
    G1 E25.0 F{printcfg.m600_med_speed|int} ; pre-load
    G1 E{FAST} F{printcfg.m600_fast_speed|int} ; load up to hotend
    G4 P900 ; wait a moment
    G1 E{SLOW} F{printcfg.m600_slow_speed|int} ; purge to change filament
    G1 E-5 F{printcfg.m600_slow_speed|int} ; retract to prevent oozing
    G90 ; Absolute postitioning
    M400
    {% if printcfg.m600_cold_start == 1 %} ; if doing a manual filament change
        M{printcfg.output|int} Cooling nozzle
        M109 S0
        {% if printcfg.auto_sensor == True %} ; if using auto filament sensor
            DISABLEFILAMENTSENSOR
        {% endif %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=m600_prev_temp VALUE=0 ; Reset previous temp
    SET_IDLE_TIMEOUT TIMEOUT={printcfg.idle_time} ; Return idle timeout to normal
    {% if printcfg.audio_status == True %} ; if using audio status alerts
        {printcfg.m600_audio} ; play m600 audio tone
    {% endif %}
    M{printcfg.output|int} Load Complete
    {% if printcfg.led_status == True %} ; if using led status alerts
        {% if printer.virtual_sdcard.is_active == True %} ; if a print is active
            {printcfg.status_printing} ; set status to printing
        {% else %} ; if no print is active
            {printcfg.status_ready} ; set status to ready
        {% endif %}
    {% endif %}
    {% if printcfg.clean_m600 == True %} ; if using clean nozzle on m600
        M{printcfg.output|int} Cleaning nozzle
        {printcfg.clean_macro} ; run clean nozzle macro
    {% endif %}
    {% if printcfg.use_fluidd == True %} ; if using fluidd interface
        {% if printcfg.m600_cold_start == 0 %} ; if not doing a manual filament change
            M118 You may now RESUME the print.
        {% endif %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=m600_coldstart VALUE=0 ; reset cold start variable

################################
############ PURGE #############
################################
## This macro is used to purge filament from a nozzle
##   before running a print.  It is typically used for
##   filament changes.
##  Parameters:
##    LENGTH:  Length of filament to purge (mm)
##   TARGET:  Target temperature to purge at (C)
[gcode_macro PURGE]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set config = printer.configfile.settings %} ; get realtime configfile settings
    {% set LENGTH = params.LENGTH|default(printcfg.m600_purge_length)|float %} ; Purge length
    ##################
    {% set cur_temp = printer.extruder.temperature|float %} ; Current temperature
    {% set cur_targ = printer.extruder.target|int %}        ; Current target
    {% if printcfg.m600_prev_temp != 0 %}
        {% set TARGET = printcfg.m600_prev_temp %} ; Use previous temp
    {% elif params.TARGET is defined  %} ; If current temp is below target
        {% set TARGET = params.TARGET|int %} ; Use target temp parameter
    {% endif %}
    {% if printer.extruder.target < config.extruder.min_extrude_temp|int %} ; Verify extruder is hot enough
        {% set TARGET = printcfg.m600_default_temp %} ; Heat up to default temp
    {% endif %}
    {% if TARGET is not defined %} ; If target is not defined
        {% set TARGET = cur_targ %} ; Set target to current extruder heater target
    {% endif %}
    {% if printcfg.led_status == True %} ; if using LED status alerts
        {printcfg.status_heat} ; Turn on Heating LEDs
    {% endif %}
    M{printcfg.output|int} Heating nozzle
    M109 S{TARGET} ; Heat nozzle to target temperature
    {% if printcfg.led_status == True %} ; if using LED status alerts
        {printcfg.status_load} ; Turn on Loading LEDs
    {% endif %}
    M{printcfg.output|int} Purging filament
    G91 ; Relative positioning
    G1 E{LENGTH} F{printcfg.m600_slow_speed|int} ; Purge filament
    G90 ; Absolute postitioning
    M400
    M109 S{cur_targ} ; Return target temp to previous value
    M{printcfg.output|int} Purge Complete
    {% if printcfg.led_status == True %} ; if using LED status alerts
        {printcfg.status_ready} ; Turn on Ready LEDs
    {% endif %}

################################
######## NOZZLE_CHANGE #########
################################
## This macro is used to change the nozzle on the printer
## It prepares the printhead by heating the nozzle to the
## apppropriate temperature and unloading the filament.
## Then the printhead is parked in a convenient position for nozzle changes.
[gcode_macro NOZZLE_CHANGE]
description: Prepare the printer for a nozzle change
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set config = printer.configfile.settings %} ; get realtime configfile settings
    CG28 ; Home all axes if not already homed
    M{printcfg.output|int} Nozzle Change
    MAINTENANCE ; Park the toolhead in a convenient position
    UNLOAD_FILAMENT ; Unload filament
    M{printcfg.output|int} Change nozzle now and run NOZZLE_CHANGE_DONE when finished

[gcode_macro NOZZLE_CHANGE_DONE]
description: Complete the nozzle change
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set config = printer.configfile.settings %} ; get realtime configfile settings
    LOAD_FILAMENT ; Load filament
    M104 S0 ; Turn off extruder heater
    M{printcfg.output|int} Nozzle Change Complete

################################
########### PARKING ############
################################
## Used to park the toolhead for filament changes
[gcode_macro _FILAMENT_PARK]
gcode:
    ## Define variables
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set config = printer.configfile.settings %} ; get realtime configfile settings
    {% if printcfg.filament_park_x is defined and printcfg.filament_park_y is defined %}
        {% set park_x = printcfg.filament_park_x %}
        {% set park_y = printcfg.filament_park_y %}
    {% else %}
        {% set park_x = printcfg.park_x %}
        {% set park_y = printcfg.park_y %}
    {% endif %}
    ## Run parking operations
	M{printcfg.output|int} Parking toolhead
	SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=m600_prev_temp VALUE={printer.extruder.target} ; Save current target temp
    G91
	{% if printer.toolhead.position.z|float + printcfg.park_z|float < config["stepper_z"]["position_max"]|float %} ; Check if park_z will exceed max_z
		{% if  printer.toolhead.position.z < printcfg.park_zmin|int %} ; Check if park_z will exceed park_zmin
            G0 Z{printcfg.park_zmin|int-printer.toolhead.position.z|int} ; Move to minimum possible z height
		{% else %} ; Otherwise, park at configured z height
            G0 Z{printcfg.park_z|int} ; Move to park_z height
        {% endif %}
	{% endif%}
	G90 ; Absolute positioning
	G0 X{park_x|int} Y{park_y|int} F{printcfg.park_speed|int} ; Move to park position

################################
######### SET_PARKING ##########
################################
[gcode_macro SET_PARKING]
description: Set up parking coordinate parameters
gcode:
    ################## Get PrintCFG ##################
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set SUCCESS = 0 %}
    ################## Get Parameters ##################
    ## General Parking
    {% set park_x = params.X | default(printcfg.park_x) | float %}
    {% set park_y = params.Y | default(printcfg.park_y) | float %}
    {% set park_z = params.Z | default(printcfg.park_z) | float %}
    {% set park_zmin = params.Z_MIN | default(printcfg.park_zmin) | float %}
    {% set park_zrel = params.Z_RELATIVE | default(printcfg.park_zrel) | float %}
    {% set park_speed = params.SPEED | default(printcfg.park_speed) | float %}
    ## Preheat Parking
    {% set preheat_x = params.PREHEAT_X | default(printcfg.preheat_x) | float %}
    {% set preheat_y = params.PREHEAT_Y | default(printcfg.preheat_y) | float %}
    {% set preheat_z = params.PREHEAT_Z | default(printcfg.preheat_z) | float %}
    ## Maintenance Parking
    {% set maint_x = params.MAINT_X | default(printcfg.maint_x) | float %}
    {% set maint_y = params.MAINT_Y | default(printcfg.maint_y) | float %}
    {% set maint_z = params.MAINT_Z | default(printcfg.maint_z) | float %}
    ################ Get Axis Limits ################
    {% set x_min = printer.toolhead.axis_minimum.x %}
    {% set x_max = printer.toolhead.axis_maximum.x %}
    {% set y_min = printer.toolhead.axis_minimum.y %}
    {% set y_max = printer.toolhead.axis_maximum.y %}
    {% set z_min = printer.toolhead.axis_minimum.z %}
    {% set z_max = printer.toolhead.axis_maximum.z %}
    ################## Set Parking ###################
    {% set x = park_x %}
    {% set y = park_y %}
    {% set z = park_z %}
    {% set mode = "Parking" %}
    {% if x < x_min or x > x_max %} ; if x is out of range
        {% set title = mode + " Coordinates" %}
        {% set msg = "X position is out of range: " + x|string %} ; set message
        {% set level = "error" %} ; set level
        { action_respond_info( "{}: {}".format( title, msg ) ) } ; report error
    {% else %}
        {% set title =  mode + " Coordinates" %}
        {% set msg = "X position is within range: " + x|string %} ; set message
        {% set level = "debug" %} ; set level
    {% endif %}
    logger title="{title}" msg="{msg}" level={level} ; log message
    {% if y < y_min or y > y_max %} ; if y is out of range
        {% set title =  mode + " Coordinates" %}
        {% set msg = "Y position is out of range: " + y|string %} ; set message
        {% set level = "error" %} ; set level
        { action_respond_info( "{}: {}".format( title, msg ) ) } ; report error
    {% else %}
        {% set title =  mode + " Coordinates" %}
        {% set msg = "Y position is within range: " + y|string %} ; set message
        {% set level = "debug" %} ; set level
    {% endif %}
    logger title="{title}" msg="{msg}" level={level} ; log message
    {% if z < z_min or z > z_max %} ; if z is out of range
        {% set title =  mode + " Coordinates" %}
        {% set msg = "Z position is out of range: " + z|string %} ; set message
        {% set level = "error" %} ; set level
        { action_respond_info( "{}: {}".format( title, msg ) ) } ; report error
    {% else %}
        {% set title =  mode + " Coordinates" %}
        {% set msg = "Z position is within range: " + z|string %} ; set message
        {% set level = "debug" %} ; set level
    {% endif %}
    logger title="{title}" msg="{msg}" level={level} ; log message
    {% set x = preheat_x %}
    {% set y = preheat_y %}
    {% set z = preheat_z %}
    {% set mode = "Preheat" %}
    {% if x < x_min or x > x_max %} ; if x is out of range
        {% set title =  mode + " Coordinates" %}
        {% set msg = "X position is out of range: " + x|string %} ; set message
        {% set level = "error" %} ; set level
        { action_respond_info( "{}: {}".format( title, msg ) ) } ; report error
    {% else %}
        {% set title =  mode + " Coordinates" %}
        {% set msg = "X position is within range: " + x|string %} ; set message
        {% set level = "debug" %} ; set level
    {% endif %}
    logger title="{title}" msg="{msg}" level={level} ; log message
    {% if y < y_min or y > y_max %} ; if y is out of range
        {% set title =  mode + " Coordinates" %}
        {% set msg = "Y position is out of range: " + y|string %} ; set message
        {% set level = "error" %} ; set level
        { action_respond_info( "{}: {}".format( title, msg ) ) } ; report error
    {% else %}
        {% set title =  mode + " Coordinates" %}
        {% set msg = "Y position is within range: " + y|string %} ; set message
        {% set level = "debug" %} ; set level
    {% endif %}
    logger title="{title}" msg="{msg}" level={level} ; log message
    {% if z < z_min or z > z_max %} ; if z is out of range
        {% set title =  mode + " Coordinates" %}
        {% set msg = "Z position is out of range: " + z|string %} ; set message
        {% set level = "error" %} ; set level
        { action_respond_info( "{}: {}".format( title, msg ) ) } ; report error
    {% else %}
        {% set title =  mode + " Coordinates" %}
        {% set msg = "Z position is within range: " + z|string %} ; set message
        {% set level = "debug" %} ; set level
    {% endif %}
    logger title="{title}" msg="{msg}" level={level} ; log message
    {% if maint_x != -1 and maint_y != -1 and maint_z != -1 %}
        {% set x = maint_x %}
        {% set y = maint_y %}
        {% set z = maint_z %}
        {% set mode = "Maintenance" %}
        {% if x < x_min or x > x_max %} ; if x is out of range
            {% set title =  mode + " Coordinates" %}
            {% set msg = "X position is out of range: " + x|string %} ; set message
            {% set level = "error" %} ; set level
            { action_respond_info( "{}: {}".format( title, msg ) ) } ; report error
        {% else %}
            {% set title =  mode + " Coordinates" %}
            {% set msg = "X position is within range: " + x|string %} ; set message
            {% set level = "debug" %} ; set level
        {% endif %}
        logger title="{title}" msg="{msg}" level={level} ; log message
        {% if y < y_min or y > y_max %} ; if y is out of range
            {% set title =  mode + " Coordinates" %}
            {% set msg = "Y position is out of range: " + y|string %} ; set message
            {% set level = "error" %} ; set level
            { action_respond_info( "{}: {}".format( title, msg ) ) } ; report error
        {% else %}
            {% set title =  mode + " Coordinates" %}
            {% set msg = "Y position is within range: " + y|string %} ; set message
            {% set level = "debug" %} ; set level
        {% endif %}
        logger title="{title}" msg="{msg}" level={level} ; log message
        {% if z < z_min or z > z_max %} ; if z is out of range
            {% set title =  mode + " Coordinates" %}
            {% set msg = "Z position is out of range: " + z|string %} ; set message
            {% set level = "error" %} ; set level
            { action_respond_info( "{}: {}".format( title, msg ) ) } ; report error
        {% else %}
            {% set title =  mode + " Coordinates" %}
            {% set msg = "Z position is within range: " + z|string %} ; set message
            {% set level = "debug" %} ; set level
        {% endif %}
        logger title="{title}" msg="{msg}" level={level} ; log message
    {% endif %}
    ################## Set Variables ##################
    ## General Parking
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=park_x VALUE={ park_x } ; set park x
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=park_y VALUE={ park_y } ; set park y
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=park_z VALUE={ park_z } ; set park z
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=park_zmin VALUE={ park_zmin } ; set park zmin
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=park_zrel VALUE={ park_zrel } ; set park zrel
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=park_speed VALUE={ park_speed } ; set park speed
    ## Preheat Parking
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=preheat_x VALUE={ preheat_x } ; set preheat x
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=preheat_y VALUE={ preheat_y } ; set preheat y
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=preheat_z VALUE={ preheat_z } ; set preheat z
    ## Maintenance Parking
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=maint_x VALUE={ maint_x } ; set maint x
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=maint_y VALUE={ maint_y } ; set maint y
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=maint_z VALUE={ maint_z } ; set maint z

## MAINTENANCE
[gcode_macro MAINTENANCE]
description: move the toolhead to a convenient position for working on it
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set config = printer.configfile.settings %} ; get realtime configfile settings
    {% set max_x = config["stepper_x"]["position_max"]|float %} ; get max x position
    {% set max_y = config["stepper_y"]["position_max"]|float %} ; get max y position
    {% set max_z = config["stepper_z"]["position_max"]|float %} ; get max z position
    {% set mid_x = max_x / 2.0 %} ; get middle of x axis
    {% set mid_y = max_y / 2.0 %} ; get middle of y axis
    {% set mid_z = max_z / 2.0 %} ; get middle of z axis
    {% if printcfg.maint_x < 0 or printcfg.maint_y < 0 or printcfg.maint_z < 0 %} ; if maintenance position is not defined move to middle of bed
        {% set move_x = mid_x %} ; use middle of x axis
        {% set move_y = mid_y %} ; use middle of y axis
        {% set move_z = mid_z %} ; use middle of z axis
    {% else %} ; otherwise,  move to defined positions
        {% set move_x = printcfg.maint_x %} ; get maintenance x position
        {% set move_y = printcfg.maint_y %} ; get maintenance y position
        {% set move_z = printcfg.maint_z %} ; get maintenance z position
    {% endif %}
    {% if printcfg.led_status == True %} ; if using LED status alerts
        {printcfg.status_busy} ; Turn on Busy LEDs
    {% endif %}
    CG28 ; Home all axes (if not already homed)
    G0 X{move_x} Y{move_y} Z{move_z} F3000 ; Move to maintenance position
    G4 P50 ; Dwell for 50ms
    M400 ; Wait for moves to finish
    M{printcfg.output|int} Maintenance position reached
    {% if printcfg.led_status == True %} ; if using LED status alerts
        {printcfg.status_ready} ; Turn on Ready LEDs
    {% endif %}

########################
##   Homing Routines  ##
########################
## Home the printer using custom homing routines
[homing_override]
axes: xyz
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set z_homing = printer['gcode_macro _HOME_Z'] %} ; get z_homing variable
    {% if printcfg.led_status == True %} ; if using LED status alerts
        {printcfg.status_homing} ; Turn on Homing LEDs
    {% endif %}
    {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %} ; check if all axes are being homed
    {% if printer.configfile.settings['force_move'].enable_force_move == True %}
        {% if z_homing.z_hopped == False %} ; if z has not been hopped
            {% if "z" not in printer.toolhead.homed_axes and printcfg.pre_home_z > 0 %} ; if z is not homed
                SET_GCODE_VARIABLE MACRO=_HOME_Z VARIABLE=z_hopped VALUE=1 ; set z_hopped to True
                SET_KINEMATIC_POSITION Z=0 ; make z appeear homed for z-hop
                {% set home_all = True %} ; force homing all axes
                G91
                G0 Z0.01 F100 ; Wake up z-steppers
                G0 Z{printcfg.pre_home_z} F{printcfg.home_z_speed} ; Lift Z before homing
            {% endif %}
        {% elif "z" in printer.toolhead.homed_axes and printer.toolhead.position.z < printcfg.pre_home_z %} ; if z is homed but position is less than 5mm
            G91
            G0 Z{printcfg.pre_home_z} F{printcfg.home_z_speed} ; Lift Z before homing
        {% endif %}
    {% endif %}
    {% if home_all or 'X' in params %} ; if homing all axes or just x
        {printcfg.home_x_macro} ; run x homing macro
    {% endif %}
    {% if home_all or 'Y' in params %} ; if homing all axes or just y
        {printcfg.home_y_macro} ; run y homing macro
    {% endif %}
    {% if home_all or 'Z' in params %} ; if homing all axes or just z
        {printcfg.home_z_macro} ; run z homing macro
    {% endif %}
    {% if printcfg.led_status == True %} ; if using LED status alerts
        {printcfg.status_ready} ; Turn on Ready LEDs
    {% endif %}

## Home the X axis
[gcode_macro _HOME_X]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %}   ; Load config variables
    {% if printcfg.sensorless_home == True %} ; If using sensorless homing
        ## Always use consistent run_current on A/B steppers during sensorless homing
        {% set tmc_x = printcfg.driver_x + " stepper_x" %}
        {% set tmc_y = printcfg.driver_y + " stepper_y" %}
        {% set RUN_CURRENT_X = printer.configfile.settings[tmc_x].run_current|float %}
        {% set RUN_CURRENT_Y = printer.configfile.settings[tmc_y].run_current|float %}
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printcfg.home_current}
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printcfg.home_current}
        ## Home
        G28 X
        ## Relative positioning
        G91
        ## Move away
        {% if printer.configfile.settings.stepper_x.position_endstop < (printer.toolhead.axis_maximum.x / 2) %}
            ## If endstop is on the left side of the bed
            G0 X{printcfg.home_retract} F{printcfg.home_retract_speed}
        {% else %}
            ## If endstop is on the right side of the bed
            G0 X-{printcfg.home_retract} F{printcfg.home_retract_speed}
        {% endif %}
        ## Wait just a second… (give StallGuard registers time to clear)
        G4 P1000
        ## Set current during print
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
    {% else %} ; If not using sensorless homing
        G28 X
        ## Wait just a moment…
        G4 P200
    {% endif %}

## Home the Y axis
[gcode_macro _HOME_Y]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %}   ; Load config variables
    {% if printcfg.sensorless_home == True %} ; If using sensorless homing
        ## Set current for sensorless homing
        {% set tmc_x = printcfg.driver_x + " stepper_x" %}
        {% set tmc_y = printcfg.driver_y + " stepper_y" %}
        {% set RUN_CURRENT_X = printer.configfile.settings[tmc_x].run_current|float %}
        {% set RUN_CURRENT_Y = printer.configfile.settings[tmc_y].run_current|float %}
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printcfg.home_current}
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printcfg.home_current}
        ## Home
        G28 Y
        ## Relative positioning
        G91
        ## Move away
        {% if printer.configfile.settings.stepper_y.position_endstop < (printer.toolhead.axis_maximum.y / 2) %}
            ## If endstop is on the front side of the bed
            G0 Y{printcfg.home_retract} F{printcfg.home_retract_speed}
        {% else %}
            ## If endstop is on the back side of the bed
            G0 Y-{printcfg.home_retract} F{printcfg.home_retract_speed}
        {% endif %}
        ## Wait just a second… (give StallGuard registers time to clear)
        G4 P1000
        ## Set current during print
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
        SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
    {% else %} ; If not using sensorless homing
        G28 Y
        ## Wait just a moment…
        G4 P200
    {% endif %}

## Home the Z axis
[gcode_macro _HOME_Z]
variable_z_hopped: 0
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %}   ; Load config variables
    G90 ; Absolute positioning
    G0 X{printcfg.home_x} Y{printcfg.home_y} F{printcfg.home_travel_speed} ; Move to home position
    G28 Z ; Home z axis
    G0 Z{printcfg.post_home_z} F{printcfg.home_travel_speed} ; Move to post home z position


## This macro sets the z homing position of the toolhead.
## It accepts the following parameters:
##   X: The x coordinate of the toolhead
##   Y: The y coordinate of the toolhead
[gcode_macro SET_HOME_POSITION]
description: Set a new temporary Z-homing position
gcode:
        ################ Get Axis Limits ################
    {% set x_min = printer.toolhead.axis_minimum.x %}
    {% set x_max = printer.toolhead.axis_maximum.x %}
    {% set y_min = printer.toolhead.axis_minimum.y %}
    {% set y_max = printer.toolhead.axis_maximum.y %}
    {% set z_min = printer.toolhead.axis_minimum.z %}
    {% set z_max = printer.toolhead.axis_maximum.z %}
    {% if params.X is defined and params.Y is defined %} ; if x and y are defined
        {% set homex = params.X|float %} ; get x position
        {% set homey = params.Y|float %} ; get y position
        {% set x = homex %}
        {% set y = homey %}
        {% set mode = "Homing" %}
        {% if x < x_min or x > x_max %} ; if x is out of range
            {% set title =  mode + " Coordinates" %}
            {% set msg = "X position is out of range: " + x|string %} ; set message
            {% set level = "error" %} ; set level
            { action_respond_info( "{}: {}".format( title, msg ) ) } ; report error

        {% else %}
            {% set title =  mode + " Coordinates" %}
            {% set msg = "X position is within range: " + x|string %} ; set message
            {% set level = "debug" %} ; set level
        {% endif %}
        logger title="{title}" msg="{msg}" level={level} ; log message
        {% if y < y_min or y > y_max %} ; if y is out of range
            {% set title =  mode + " Coordinates" %}
            {% set msg = "Y position is out of range: " + y|string %} ; set message
            {% set level = "error" %} ; set level
            { action_respond_info( "{}: {}".format( title, msg ) ) } ; report error
        {% else %}
            {% set title =  mode + " Coordinates" %}
            {% set msg = "Y position is within range: " + y|string %} ; set message
            {% set level = "debug" %} ; set level
        {% endif %}
        logger title="{title}" msg="{msg}" level={level} ; log message
        {% if bad_values is not defined %} ; if no bad values
            SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=home_x VALUE={homex} ; set x home position
            SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=home_y VALUE={homey} ; set y home position
            { action_respond_info("Homing Position set to: X=" + homex|string + " Y=" + homey|string) } ; report success
        {% endif %}
    {% else %} ; if X and Y parameters are not defined
        { action_respond_info("X and Y parameters must be provided.") } ; report error
    {% endif %}

################################
########## SET_HOMING ##########
################################
[gcode_macro SET_HOMING]
description: Set up homing parameters
gcode:
    ################## Get PrintCFG ##################
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    ################## Get Parameters ##################
    ## Homing Position
    {% set homex = params.X | default(printcfg.home_x) | float %} ; get x position
    {% set homey = params.Y | default(printcfg.home_y) | float %} ; get y position
    SET_HOME_POSITION X={homex} Y={homey} ; set home position
    ## Homing Speed
    {% set travel_speed = params.TRAVEL_SPEED | default(printcfg.home_travel_speed) | float %} ; get travel speed
    {% set z_speed = params.Z_SPEED | default(printcfg.home_z_speed) | float %} ; get z speed
    ## Homing Current
    {% set home_current = params.HOME_CURRENT | default(printcfg.home_current) | float %} ; get home current
    ## Retraction
    {% set home_retract = params.HOME_RETRACT | default(printcfg.home_retract) | float %} ; get home retract
    {% set home_retract_speed = params.HOME_RETRACT_SPEED | default(printcfg.home_retract_speed) | float %} ; get home retract speed
    ## Z Lift
    {% set pre_home_z = params.PRE_HOME_Z | default(printcfg.pre_home_z) | float %} ; get pre home z
    {% set post_home_z = params.POST_HOME_Z | default(printcfg.post_home_z) | float %} ; get post home z
    ## Sensorless Homing
    {% set sensorless_homing = params.SENSORLESS_HOMING | default(printcfg.sensorless_home) | int %} ; get sensorless homing
    ############## Make Strings Booleans ##############%}
    {% if params.SENSORLESS_HOMING is defined and params.SENSORLESS_HOMING | lower == 'true' %} ; if sensorless homing is true
        {% set sensorless_homing = 1 %} ; set sensorless homing
    {% elif params.SENSORLESS_HOMING is defined and params.SENSORLESS_HOMING | lower == 'false' %} ; if sensorless homing is false
        {% set sensorless_homing = 0 %} ; set sensorless homing
    {% endif %}
    ################## Set Variables ##################
    ## Homing Speed
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=home_travel_speed VALUE={travel_speed} ; set travel speed
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=home_z_speed VALUE={z_speed} ; set z speed
    ## Homing Current
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=home_current VALUE={home_current} ; set home current
    ## Retraction
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=home_retract VALUE={home_retract} ; set home retract
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=home_retract_speed VALUE={home_retract_speed} ; set home retract speed
    ## Z Lift
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=pre_home_z VALUE={pre_home_z} ; set pre home z
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=post_home_z VALUE={post_home_z} ; set post home z
    ## Sensorless Homing
    SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=sensorless_home VALUE={sensorless_homing} ; set sensorless homing

## Only home if not homed
[gcode_macro CG28]
variable_output: 116 ; Output method for status feedback
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% if "x" in rawparams|string|lower %} ; if x is in rawparams
        {% set X = True %} ; set x flag
    {% endif %}
    {% if "y" in rawparams|string|lower %} ; if y is in rawparams
        {% set Y = True %} ; set y flag
    {% endif %}
    {% if "z" in rawparams|string|lower %} ; if z is in rawparams
        {% set Z = True %} ; set z flag
    {% endif %}
    {% if rawparams|string|lower == "" %} ; if no parameters are defined
        {% set ALL = True %} ; set all flag
        {% set X = True %}   ; set x flag
        {% set Y = True %}   ; set y flag
        {% set Z = True %}   ; set z flag
    {% endif %}
    {% if printer.toolhead.homed_axes != "xyz" %} ; if not homed
        {% if "x" not in printer.toolhead.homed_axes %} ; if x is not homed
            {% set home_x = True %} ; set home_x flag
        {% endif %}
        {% if "y" not in printer.toolhead.homed_axes %} ; if y is not homed
            {% set home_y = True %} ; set home_y flag
        {% endif %}
        {% if "z" not in printer.toolhead.homed_axes %} ; if z is not homed
            {% set home_z = True %} ; set home_z flag
        {% endif %}

        {% if home_x == True and home_y == True and home_z == True %} ; if all axes need to be homed
            {% if ALL == True %} ; if all axes are being homed
                M{output} Homing all axes
                G28 ; Home all axes
            {% else %} ; if only some axes are being homed
                {% if X == True %} ; if x is being homed
                    M{output} Homing X axis
                    G28 X ; Home x axis
                {% endif %}
                {% if Y == True %} ; if y is being homed
                    M{output} Homing Y axis
                    G28 Y ; Home y axis
                {% endif %}
                {% if Z == True %} ; if z is being homed
                    M{output} Homing Z axis
                    G28 Z ; Home z axis
                {% endif %}
            {% endif %}
        {% else %} ; if only some axes need to be homed
            {% if home_x == True %} ; if x needs to be homed
                {% if X == True %} ; if x is being homed
                    M{output} Homing X axis
                    G28 X ; Home x axis
                {% endif %}
            {% endif %}
            {% if home_y == True %} ; if y needs to be homed
                {% if Y == True %} ; if y is being homed
                    M{output} Homing Y axis
                    G28 Y ; Home y axis
                {% endif %}
            {% endif %}
            {% if home_z == True %} ; if z needs to be homed
                {% if Z == True %} ; if z is being homed
                    M{output} Homing Z axis
                    G28 Z ; Home z axis
                {% endif %}
            {% endif %}
        {% endif %}
    {% else %} ; if already homed
        M{output} All axes are homed
    {% endif %}

## Only QGL if not QGL'd
[gcode_macro CQGL]
gcode:
    {% if printer.quad_gantry_level.applied == False %} ; if not QGL'd
        {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
        {% if printcfg.led_status == True %} ; if using LED status alerts
            {printcfg.status_homing} ; Turn on Homing LEDs
        {% endif %}
        CG28 ; Home all axes if not homed
        {% if printcfg.led_status == True %} ; if using LED status alerts
            {printcfg.status_cal_z} ; Turn on Z-Calibration LEDs
        {% endif %}
        QUAD_GANTRY_LEVEL ; QGL
        {% if printcfg.led_status == True %} ; if using LED status alerts
            {printcfg.status_homing} ; Turn on Homing LEDs
        {% endif %}
        G28 Z
        {% if printcfg.led_status == True %} ; if using LED status alerts
            {printcfg.status_ready} ; Turn on Ready LEDs
        {% endif %}
    {% endif %}

## Only Z-tilt if not Z-tilted
[gcode_macro CZ_TILT_ADJUST]
gcode:
    {% if printer.z_tilt.applied == False %} ; if not QGL'd
        {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
        {% if printcfg.led_status == True %} ; if using LED status alerts
            {printcfg.status_homing} ; Turn on Homing LEDs
        {% endif %}
        CG28 ; Home all axes if not homed
        {% if printcfg.led_status == True %} ; if using LED status alerts
            {printcfg.status_cal_z} ; Turn on Z-Calibration LEDs
        {% endif %}
        Z_TILT_ADJUST ; Z-tilt adjustment
        {% if printcfg.led_status == True %} ; if using LED status alerts
            {printcfg.status_ready} ; Turn on Ready LEDs
        {% endif %}
    {% endif %}


################################
######## AUDIO ALERTS ##########
################################
## Audio alert macros
[delayed_gcode alert_beeper]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% if printcfg.audio_status == True %} ; if using audio status alerts
        {printcfg.m600_audio} ; Play alert tone
    {% endif %}
    UPDATE_DELAYED_GCODE ID=alert_beeper DURATION={printcfg.alert_freq|int}
## Start the alert beep cycle
[gcode_macro ALERT_BEEP_ON]
gcode:
    UPDATE_DELAYED_GCODE ID=alert_beeper DURATION=1
## Stop the alert beep cycle
[gcode_macro ALERT_BEEP_OFF]
gcode:
    UPDATE_DELAYED_GCODE ID=alert_beeper DURATION=0

################################
#### FILAMENT SENSOR CONTROL####
################################
## Disable filament sensor at startup
[delayed_gcode AUTO_DISABLEFILAMENTSENSOR]
initial_duration: 1
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %}
    {% if printcfg.auto_filament_sensor == True %} ; If automated sensor feature is enabled
        SET_FILAMENT_SENSOR SENSOR={printcfg.filament_sensor} ENABLE=0 ; Disable sensor
    {% endif %}
## Enable filament sensor
[gcode_macro ENABLEFILAMENTSENSOR]
description: Activates filament sensor   
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %}
    {% set SENSOR = params.SENSOR|default(printcfg.filament_sensor) %} ; get sensor
    #SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=filament_sensor VALUE="{ SENSOR|string }" ; set filament sensor
    UPDATE_DELAYED_GCODE ID=delayed_filament_sensor DURATION={printcfg.auto_filament_delay} ; delay sensor activation
[delayed_gcode delayed_filament_sensor]
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %}
    {% set SENSOR = printcfg.filament_sensor %} ; get sensor
    #M{printcfg.output|int} Enabling filament sensor
    SET_FILAMENT_SENSOR SENSOR={SENSOR} ENABLE=1
## Disable filament sensor
[gcode_macro DISABLEFILAMENTSENSOR]
description: Deactivates filament sensor
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %}
    {% set SENSOR = params.SENSOR|default(printcfg.filament_sensor) %} ; get sensor
    #M{printcfg.output|int} Disabling filament sensor
    SET_FILAMENT_SENSOR SENSOR={SENSOR} ENABLE=0

################################
######### DOOR CONTROL #########
################################
## Door control macros

### Door Variables ###
[gcode_macro _door_cfg]
variable_debounce:        0 ; <-- DO NOT CHANGE THIS VARIABLE
variable_state:           0 ; <-- DO NOT CHANGE THIS VARIABLE
variable_bounce:          0 ; <-- DO NOT CHANGE THIS VARIABLE
variable_last_door:       0 ; <-- DO NOT CHANGE THIS VARIABLE
variable_last_state:      0 ; <-- DO NOT CHANGE THIS VARIABLE
gcode:

[gcode_macro _open_door]
description: Door is opened
variable_door: 0
gcode:
    {% set doorcfg = printer['gcode_macro _door_cfg'] %}                          ; get doorcfg variables
    {% set printcfg = printer['gcode_macro _printcfg'] %}                         ; get printcfg variables
    {% set door = params.DOOR|default(0) %}                                       ; get door number
    {% set door_name = printcfg['door' + door + '_name'] %}                       ; set door name
    SET_GCODE_VARIABLE MACRO=_open_door VARIABLE=door VALUE={door}                ; store door
    logger title=Doors msg="Door: {door_name} opened"                             ; log door open
    {% if doorcfg.debounce == 0 %}                                                ; check debounce
        M{printcfg.output|int} Door: {door_name} opened                           ; status output
        {printcfg.status_door_open}                                               ; open door LEDs
        {% if custom_macro == True %}                                             ; check for custom macro
            {printer['gcode_macro _printcfg'][door_macro]}                        ; run custom macro
        {% endif %}
        SET_GCODE_VARIABLE MACRO=_door_cfg VARIABLE=state VALUE=1                 ; set door state
        SET_GCODE_VARIABLE MACRO=_door_cfg VARIABLE=last_door VALUE={door}        ; set last door
        SET_GCODE_VARIABLE MACRO=_door_cfg VARIABLE=last_state VALUE="'open'"     ; set last state
    #    SET_GCODE_VARIABLE MACRO=_door_cfg VARIABLE=debounce VALUE=1                            ; set debounce state
    #    SET_GCODE_VARIABLE MACRO=_door_cfg VARIABLE=bounce VALUE=1                              ; set door bounce
    #    UPDATE_DELAYED_GCODE ID=door_debounce DURATION={(printcfg.door_debounce / 1000)|float}   ; set debounce timer
    #{% else %}                                                                                 ; bounced
    #    SET_GCODE_VARIABLE MACRO=_door_cfg VARIABLE=bounce VALUE=1                              ; set door bounce
    {% endif %}

[gcode_macro _close_door]
description: Door is closed
variable_door: 0
gcode:
    {% set doorcfg = printer['gcode_macro _door_cfg'] %}                            ; get doorcfg variables
    {% set printcfg = printer['gcode_macro _printcfg'] %}                           ; get printcfg variables
    {% set door = params.DOOR|default(0) %}                                         ; get door number
    {% set door_name = printcfg['door' + door + '_name'] %}                         ; set door name
    SET_GCODE_VARIABLE MACRO=_close_door VARIABLE=door VALUE={door}                 ; store door
    logger title=Doors msg="Door: {door_name} closed"                               ; log door close
    {% set door_macro = "door" + door|string + "_closed" %}
    {% set custom_macro = True if printer['gcode_macro _printcfg'][door_macro] is defined else False %}
    {% if doorcfg.debounce == 0 %}                                                  ; check debounce
        M{printcfg.output|int} Door: {door_name} closed                             ; status output
        {% if printer.virtual_sdcard.is_active == True %}                           ; printing state
            {printcfg.status_printing}                                              ; closed door printing LEDs
        {% else %}                                                                  ; idle state
            {printcfg.status_ready}                                                 ; closed door idle LEDs
        {% endif %}
        {% if custom_macro == True %}                                               ; check for custom macro
            {printer['gcode_macro _printcfg'][door_macro]}                          ; run custom macro
        {% endif %}
        SET_GCODE_VARIABLE MACRO=_door_cfg VARIABLE=state VALUE=0                   ; set door state
        SET_GCODE_VARIABLE MACRO=_door_cfg VARIABLE=last_door VALUE={door}          ; set last door
        SET_GCODE_VARIABLE MACRO=_door_cfg VARIABLE=last_state VALUE="'closed'"     ; set last state
    #    SET_GCODE_VARIABLE MACRO=_door_cfg VARIABLE=debounce VALUE=1                    ; set debounce state
    #    SET_GCODE_VARIABLE MACRO=_door_cfg VARIABLE=bounce VALUE=0                      ; set door bounce
    #    UPDATE_DELAYED_GCODE ID=door_debounce DURATION={(printcfg.door_debounce / 1000)|float} ; set debounce timer
    #{% else %}                                                                          ; bounced
    #    SET_GCODE_VARIABLE MACRO=_door_cfg VARIABLE=bounce VALUE=0                      ; set door bounce
    {% endif %}


[delayed_gcode door_debounce]
gcode:
    {% set doorcfg = printer['gcode_macro _door_cfg'] %}                                ; get doorcfg variables
    {% set printcfg = printer['gcode_macro _printcfg'] %}                               ; get printcfg variables
    {% set door = printer['gcode_macro _doorcfg'].last_door %}                          ; get door number
    {% set state = printer['gcode_macro _doorcfg'].last_state %}                        ; get door state
    {% set door_macro = "door" + door|string + "_" + state|string %}                    ; get door macro
    {% if doorcfg.bounce != doorcfg.state %}                                            ; check if a bounce ocurred
        {% if doorcfg.bounce == 1 %}                                                    ; bounced open
            SET_GCODE_VARIABLE MACRO=_door_cfg VARIABLE=state VALUE=1                   ; set door state
            SET_GCODE_VARIABLE MACRO=_door_cfg VARIABLE=bounce VALUE=1                  ; set door bounce
            SET_GCODE_VARIABLE MACRO=_door_cfg VARIABLE=last_state VALUE="'open'"       ; set last state
            M{printcfg.output|int} Door Open                                            ; status output
            {printcfg.status_door_open}                                                 ; open door LEDs
            {% if custom_macro == True %}                                               ; check for custom macro
                {printer['gcode_macro _printcfg'][door_macro]}                          ; run custom macro
            {% endif %}
        {% else %}                                                                      ; bounced closed
            SET_GCODE_VARIABLE MACRO=_door_cfg VARIABLE=state VALUE=0                   ; set door state
            SET_GCODE_VARIABLE MACRO=_door_cfg VARIABLE=bounce VALUE=0                  ; set door bounce
            SET_GCODE_VARIABLE MACRO=_door_cfg VARIABLE=last_state VALUE="'closed'"     ; set last state
            M{printcfg.output|int} Door Closed                                          ; status output
            {% if printer.virtual_sdcard.is_active == True %}                           ; printing state
                {printcfg.status_printing}                                              ; closed door printing LEDs
            {% else %}                                                                  ; idle state
                {printcfg.status_ready}                                                 ; closed door idle LEDs
            {% endif %}
            {% if custom_macro == True %}                                               ; check for custom macro
                {printer['gcode_macro _printcfg'][door_macro]}                          ; run custom macro
            {% endif %}
        {% endif %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_door_cfg VARIABLE=debounce VALUE=0                        ; reset debounce state

################################
######### SIMPLE_PAUSE #########
################################
## This macro will determine the correct command to pause the print without any additional actions
## Example usage:
##   # Pause the print
##   SIMPLE_PAUSE

## Pause the print
[gcode_macro SIMPLE_PAUSE]
description: Pause the print without any additional actions
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set config = printer.configfile.settings %} ; get realtime configfile settings
    {% set dbg_msg = "Debugging: \nMacro: SIMPLE_PAUSE\n" %} ; set debug message"}
    {% if printer['gcode_macro _CLIENT_VARIABLE'] is defined %} ; get web client variables
        {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %} ; get web client variables
        {% set dbg_msg = dbg_msg + "Client: True\n" %} ; set debug message
    {% endif %}
    {% if config.pause_resume is not defined %} ; verify pause_resume feature is enabled
        M{printcfg.output|int} Pause/Resume feature is not enabled
        {% set dbg_msg = dbg_msg + "Pause/Resume: False\n" %} ; set debug message
    {% else %}
        {% set dbg_msg = dbg_msg + "Pause/Resume: True\n" %} ; set debug message
        {% set pause_macro = 'gcode_macro ' + printcfg.pause_macro|string %}
        {% set pause_base = 'gcode_macro ' + printcfg.pause_no_park|string %}
        ## Verify macros exist
        {% if printer[pause_macro] is not defined %}
            M{printcfg.output|int} Pause macro does not exist
            {% set dbg_msg = dbg_msg + "Pause Macro: False\n" %} ; set debug message
        {% elif printer[pause_base] is not defined %}
            M{printcfg.output|int} Pause without parking macro does not exist
            {% set dbg_msg = dbg_msg + "Pause No Park Macro: False\n" %} ; set debug message
            ## Set flag to use alternative options
            {% set can_pause = False %}
        {% endif %}
        {% if not can_pause %}
            {% set pause_base = 'gcode_macro ' + printcfg.pause|string + '_BASE' %}
            {% if printer[pause_base] is defined %}
                {% set pause_base = printcfg.pause|string + '_BASE' %}
                {% set dbg_msg = dbg_msg + printcfg.pause|string + "_BASE Macro: True\n" %} ; set debug message
                {% set can_pause = True %}
            {% else %}
                {% set pause_base = 'gcode_macro ' + printcfg.pause|string + '.0' %}
                {% if printer[pause_base] is defined %}
                    {% set pause_base = printcfg.pause|string + '.0' %}
                    {% set dbg_msg = dbg_msg + printcfg.pause|string + ".0 Macro: True\n" %} ; set debug message
                    {% set can_pause = True %}
                {% else %}
                    M{printcfg.output|int} No useable macro found, defaulting to 'PAUSE'
                    {% set pause_base = 'PAUSE' %}
                    {% set dbg_msg = dbg_msg + "Default Macro: True\n" %} ; set debug message
                    {% set can_pause = True %}
                {% endif %}
            {% endif %}
        {% endif %}
        {% set dbg_msg = dbg_msg + "Can Pause: " + can_pause|string + "\n" %} ; set debug message
        {% set dbg_msg = dbg_msg + "Chosen macro: " + pause_base|string + "\n" %} ; set debug message
        {% if can_pause %}
            {% if printer.pause_resume.is_paused %}
                M{printcfg.output|int} Already paused
                {% set dbg_msg = dbg_msg + "Already Paused\n" %} ; set debug message
            {% else %}
                {% if "xyz" not in printer.toolhead.homed_axes %}
                    M{printcfg.output|int} Cannot pause while toolhead is not homed
                    {% set dbg_msg = dbg_msg + "Toolhead not homed\n" %} ; set debug message
                {% else %}
                    {% set dbg_msg = dbg_msg + "Pause command fired: " + pause_base %} ; set debug message
                    {pause_base} ; pause print
                {% endif %}
            {% endif %}
        {% endif %}
    {% endif %}
    {% if printcfg.debugging == True %}
        {% set dbg_msg = dbg_msg + "Debugging: True\n" %} ; set debug message
        M{printcfg.debug_output|int} {dbg_msg|string}
    {% endif %}

################################
##### STORE_POSITION_MODE ######
################################
## These macros will:
## P500: Store the current position mode (absolute or relative) and extrusion mode (absolute or relative) in a variable.
## P501: Restore the position mode and extrusion mode from the variable.
## Example usage:
##   # Store last position mode
##   P500
##   # Change to relative position mode
##   G91
##   # Restore last position mode
##   P501

## Store last position mode
[gcode_macro P500]
variable_last_coords: 91
variable_last_extrude: 83
description: Store last position mode
gcode:
    ## Store last position mode
    {% if printer.gcode_move.absolute_coordinates == True %}
        {% set last_coords = 90 %}
    {% else %}
        {% set last_coords = 91 %}
    {% endif %}
    {% if printer.gcode_move.absolute_extrusion == True %}
        {% set last_extrude = 82 %}
    {% else %}
        {% set last_extrude = 83 %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=P500 VARIABLE=last_coords VALUE={last_coords}
    SET_GCODE_VARIABLE MACRO=P500 VARIABLE=last_extrude VALUE={last_extrude}

## Restore last position mode
[gcode_macro P501]
description: Restore last position mode
gcode:
        # Get stored values
        {% set last_coords = printer['gcode_macro P500'].variable_last_coords %}
        {% set last_extrude = printer['gcode_macro P500'].variable_last_extrude %}
        ## Get current values
        {% if printer.gcode_move.absolute_coordinates == True %}
            {% set coords = 90 %}
        {% else %}
            {% set coords = 91 %}
        {% endif %}
        {% if printer.gcode_move.absolute_extrusion == True %}
            {% set extrude = 82 %}
        {% else %}
            {% set extrude = 83 %}
        {% endif %}
        ## Restore last position mode
        {% if coords != last_coords %}
            {% if coords == 90 %}
                G90
            {% else %}
                G91
            {% endif %}
        {% endif %}
        {% if extrude != last_extrude %}
            {% if extrude == 82 %}
                M82
            {% else %}
                M83
            {% endif %}
        {% endif %}

################################
###### SAVE/RESTORE STATE ######
################################
## These macros will:
## M500: Save the current state of the printer (position, extrusion, feedrate, etc.) in a variable.
## M501: Restore the state of the printer from the variable.
## Example usage:
##   # Save current state
##   M500
##   # Change to relative position mode
##   G91
##   # MOVE X 10
##   G1 X10
##   # Restore last state
##   M501

## Save current state
[gcode_macro M500]
description: Save current state
gcode:
    ## Save the current state
    SAVE_GCODE_STATE NAME=M500

## Restore last state
[gcode_macro M501]
description: Restore last state
gcode:
    ## Check for speed parameter
    {% if params.SPEED is defined %}
        {% set speed = params.SPEED|default(1000)|int %}
        ## Restore the last state
        RESTORE_GCODE_STATE NAME=M500 MOVE=1 SPEED={speed}
    {% else %}
        ## Restore the last state
        RESTORE_GCODE_STATE NAME=M500 MOVE=1
    {% endif %}

[gcode_macro DRIVER_TEMPS]
description: Print driver stats
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %} ; get printcfg variables
    {% set config = printer.configfile.settings %} ; get realtime configfile settings
    {% if printcfg.driver_x == 'tmc2240' %}
        ## Set tmc drivers
        {% set tmc_x = printcfg.driver_x + " stepper_x" %}
        {% set x_temp = printer[tmc_x].temperature %}
        {% if x_temp|lower != 'none' %}
            ## Output temperature
            { action_respond_info( "X driver temperature: {}°C".format(x_temp) ) }
        {% else %}
            M{printcfg.output|int} "X driver temperature: N/A"
        {% endif %}
    {% else %}
        M{printcfg.output|int} "X driver temperature: N/A"
    {% endif %}
    {% if printcfg.driver_y == 'tmc2240' %}
        ## Set tmc drivers
        {% set tmc_y = printcfg.driver_y + " stepper_y" %}
        {% set y_temp = printer[tmc_y].temperature %}
        {% if y_temp|lower != 'none' %}
            ## Output temperature
            { action_respond_info( "Y driver temperature: {}°C".format(y_temp) ) }
        {% else %}
            M{printcfg.output|int} "Y driver temperature: N/A"
        {% endif %}
    {% else %}
        M{printcfg.output|int} "Y driver temperature: N/A"
    {% endif %}
## Verify the printcfg variables are all valid
[delayed_gcode printcfg_check]
initial_duration: 1
gcode:
    ## Load config varibles
    {% set printcfg = printer['gcode_macro _printcfg'] %}
    ## Check and set nozzle_diameter
    {% if printcfg.nozzle_diameter|float == 0 %}
        {% set printcfg.nozzle_diameter = printer.extruder.nozzle_diameter %}
        M{printcfg.error_output} "WARNING: nozzle_diameter not set in printcfg, using " + printcfg.nozzle_diameter + " from toolhead"
    {% endif %}
    ## Check controller fan macros
    {% if printcfg.controller_fan == True %}
        {% if printcfg.controller_fan_start is not defined %}
            M{printcfg.error_output} "WARNING: controller_fan_start macro does not exist!"
        {% endif %}
        {% if printcfg.controller_fan_stop is not defined %}
            M{printcfg.error_output} "WARNING: controller_fan_stop macro does not exist!"
        {% endif %}
    {% endif %}
    ## Check docking probe macros
    {% if printcfg.docking_probe == True %}
        {% if printcfg.attach_macro is not defined %}
            M{printcfg.error_output} "WARNING: attach_macro does not exist!"
        {% endif %}
        {% if printcfg.dock_macro is not defined %}
            M{printcfg.error_output} "WARNING: dock_macro does not exist!"
        {% endif %}
    {% endif %}
    ## Check cleaning macro
    {% if printcfg.cleaning == True %}
        {% if printcfg.clean_macro is not defined %}
            M{printcfg.error_output} "WARNING: clean_macro does not exist!"
        {% endif %}
    {% endif %}
    ## Check purging macro
    {% if printcfg.purging == True %}
        {% if printcfg.purge_macro is not defined %}
            M{printcfg.error_output} "WARNING: purge_macro does not exist!"
        {% endif %}
    {% endif %}
    ## Check power off macro
    {% if printcfg.power_off == True %}
        {% if printcfg.off_macro is not defined %}
            M{printcfg.error_output} "WARNING: off_macro does not exist!"
        {% endif %}
    {% endif %}
    ## Check M600 macro
    {% if printcfg.m600 is not defined %}
        M{printcfg.error_output} "WARNING: m600 macro does not exist!"
    {% endif %}
    ## Check led status macros
    {% if printcfg.led_status == True %}
        {% if printcfg.status_ready is not defined %}
            M{printcfg.error_output} "WARNING: status_ready macro does not exist!"
        {% endif %}
        {% if printcfg.status_busy is not defined %}
            M{printcfg.error_output} "WARNING: status_busy macro does not exist!"
        {% endif %}
        {% if printcfg.status_homing is not defined %}
            M{printcfg.error_output} "WARNING: status_homing macro does not exist!"
        {% endif %}
        {% if printcfg.status_mesh is not defined %}
            M{printcfg.error_output} "WARNING: status_mesh macro does not exist!"
        {% endif %}
        {% if printcfg.status_clean is not defined %}
            M{printcfg.error_output} "WARNING: status_clean macro does not exist!"
        {% endif %}
        {% if printcfg.status_heat is not defined %}
            M{printcfg.error_output} "WARNING: status_heat macro does not exist!"
        {% endif %}
        {% if printcfg.status_m600 is not defined %}
            M{printcfg.error_output} "WARNING: status_m600 macro does not exist!"
        {% endif %}
        {% if printcfg.status_load is not defined %}
            M{printcfg.error_output} "WARNING: status_load macro does not exist!"
        {% endif %}
        {% if printcfg.status_unload is not defined %}
            M{printcfg.error_output} "WARNING: status_unload macro does not exist!"
        {% endif %}
    {% endif %}
    ## Check audio status macros
    {% if printcfg.audio_status == True %}
        {% if printcfg.start_audio is not defined %}
            M{printcfg.error_output} "WARNING: start_audio macro does not exist!"
        {% endif %}
        {% if printcfg.error_audio is not defined %}
            M{printcfg.error_output} "WARNING: error_audio macro does not exist!"
        {% endif %}
        {% if printcfg.success_audio is not defined %}
            M{printcfg.error_output} "WARNING: success_audio macro does not exist!"
        {% endif %}
        {% if printcfg.resume_audio is not defined %}
            M{printcfg.error_output} "WARNING: resume_audio macro does not exist!"
        {% endif %}
        {% if printcfg.m600_audio is not defined %}
            M{printcfg.error_output} "WARNING: m600_audio macro does not exist!"
        {% endif %}
    {% endif %}
    ## Check telegram status macros
    {% if printcfg.use_telegram == True %}
        {% if printcfg._telegram_runout is not defined %}
            M{printcfg.error_output} "WARNING: _telegram_runout macro does not exist!"
        {% endif %}
    {% endif %}
    ## Check tmc drivers
    {% if printcfg.sensorless_home == True %}
        ## Set tmc drivers
        {% set tmc_x = printcfg.driver_x + " stepper_x" %}
        {% set tmc_y = printcfg.driver_y + " stepper_y" %}
        {% if printcfg.tmc_x is defined and printcfg.tmc_y is defined %}
            SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=tmc_x VALUE={tmc_x}
            SET_GCODE_VARIABLE MACRO=_printcfg VARIABLE=tmc_y VALUE={tmc_y}
        {% else %}
            M{printcfg.error_output} "WARNING: tmc drivers are not defined! Please set tmc_x and tmc_y in your printer.cfg!"
        {% endif %}
        ## Verify tmc drivers
        {% if printer[tmc_x] is not defined %}
            M{printcfg.error_output} "WARNING: configured tmc X drivers do not exist!"
        {% endif %}
        {% if printer[tmc_y] is not defined %}
            M{printcfg.error_output} "WARNING: configured tmc Y drivers do not exist!"
        {% endif %}
    {% endif %}

################################
########### LAYERS #############
################################
[gcode_macro _BEGIN_LAYER]
description: New Layer command
gcode:
    ## Currently has no functionality.

################################
########### Aliases ############
################################
[gcode_macro PREP_PRINT]
gcode:
    START_PRINT { rawparams }

[gcode_macro PRINT_START]
gcode:
    START_PRINT { rawparams }

[gcode_macro PRINT_END]
gcode:
    END_PRINT { rawparams }

[gcode_macro PRESENT_PRINT]
gcode:
    END_PRINT { rawparams }

[gcode_macro LAZY_HOME]
gcode:
    CG28 { rawparams }

[gcode_macro HOME_CHECK]
gcode:
    CG28 { rawparams }

[gcode_macro CHECK_HOME]
gcode:
    CG28 { rawparams }

[gcode_macro HOME_IF_NEEDED]
gcode:
    CG28 { rawparams }
